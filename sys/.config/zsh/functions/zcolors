#!/bin/zsh
emulate -L zsh; setopt extendedglob rcquotes warncreateglobal

if [[ ! -v color ]]; then
  autoload -Uz colors
  colors
fi
() {
  local -i i num
  local name code
  for (( i = 0; i < 8; i++ )); do
    name=$color[$(( i + 30 ))]
    for num name in $i "$name" $(( i + 8 )) "bright$name"; do
      for code name in "38;5;$num" "$name" "48;5;$num" "bg-$name"; do
        color[$code]="$name"
        color[$name]="$code"
  done
    done
  done
  color[03]=italic
  color[italic]=03
}
print -r - "typeset -gA color=( ${(kv@q+)color:#} )"

local -TU LS_COLORS="$1" ls_colors

local MATCH MBEGIN MEND
LS_COLORS="${LS_COLORS//(#m)(???~;5;)<30-37>/$MATCH[1,3]38;5;$MATCH[-1]}"
LS_COLORS="${LS_COLORS//(#m)(???~;5;)<40-47>/$MATCH[1,3]48;5;$MATCH[-1]}"
LS_COLORS="${LS_COLORS//(#m)(???~;5;)<90-97>/$MATCH[1,3]38;5;$((MATCH[-1] + 8))}"
LS_COLORS="${LS_COLORS//(#m)(???~;5;)<100-107>/$MATCH[1,3]48;5;$((MATCH[-1] + 8))}"

local -A ls_defaults=(
  'no' "$color[none]"
  'fi' "$color[white]"
  'mi' "$color[brightblack]"
  'or' "$color[red];$color[italic]"
  'ex' "$color[brightgreen]"
  'sg' "$color[brightyellow]"
  'su' "$color[brightred]"
  'st' "$color[blue]"
  'di' "$color[brightblue]"
  'tw' "$color[blue];$color[underline]"
  'ow' "$color[brightblue];$color[underline]"
  'ln' "$color[brightcyan]"
  'so' "$color[brightmagenta]"
  'pi' "$color[yellow]"
  'cd' "$color[yellow];$color[bold]"
  'bd' "$color[yellow];$color[italic]"
  '*.DS_Store' "$color[faint]"
  '*.zwc' "$color[faint]"
)
ls_colors=( "${(@)ls_colors[@]:/ln=target}" )
() {
  local k v; for k v in ${(kv@)ls_defaults}; do
    [[ -z $ls_colors[(r)$k=*] ]] &&
      ls_colors+=( "$k=$v" )
  done
}

print -r - "export -TU LS_COLORS=${(q+)LS_COLORS} ls_colors"

local -A syntax_colors=(
  default       'no'
  comment       'mi'
  unknown-token 'or'

  arg0                    'ex'
  builtins                'ex'
  suffix-alias            'ex'
  single-hyphen-option    'sg'
  double-hyphen-option    'sg'
  single-quoted-argument  'sg'
  double-quoted-argument  'sg'
  dollar-quoted-argument  'sg'
  precommand              'su'
  reserved-word           'su'

  globbing                  'tw'
  path_prefix               'di'
  path_prefix_pathseparator 'st'
  path                      'ow'
  path_pathseparator        'tw'
  autodirectory             'ow'

  global-alias                  'ln'
  rc-quote                      'ln'
  dollar-double-quoted-argument 'ln'
  assign                        'ln'
  back-double-quoted-argument   'ln'
  back-dollar-quoted-argument   'ln'
  history-expansion             'ln'

  back-quoted-argument-delimiter  'so'
  command-substitution-delimiter  'so'
  process-substitution-delimiter  'so'
  back-quoted-argument  'no'
  command-substitution  'no'
  process-substitution  'no'

  redirection             'pi'
  commandseparator        'pi'
  numeric-fd              'cd'
  named-fd                'bd'

  bracket-error           'or'
  bracket-level-1         'so'
  bracket-level-2         'so'
  bracket-level-3         'so'
  bracket-level-4         'so'
  bracket-level-5         'so'
)
local -A ZSH_HIGHLIGHT_STYLES=()

.lscolor() {
  print -r - ${ls_colors[(R)$1=*]#$1=}
}

() {
  local -aU spec
  local -i num
  local syn col em bg fg tmp
  for syn col in "${(kv@)syntax_colors}"; do
    spec=() em=0 col="$(.lscolor $col)" fg='' bg='' tmp=''
    for num in ${(s.;.)col}; do
      case $tmp$num in
        0 )
          spec+=( none )
          ;;
        1 )
          spec+=( bold )
          ;;
        <3-4> )
          spec+=( underline )
          ;;
        7 )
          spec+=( standout )
          ;;
        39 )
          fg=default
          ;;
        49 )
          bg=default
          ;;
        (38|48)(|\;5) )
          tmp+="$num;"
          ;;
        38\;5\;<-> )
          fg=$num
          tmp=''
          ;;
        48\;5\;<-> )
          bg=$num
          tmp=''
          ;;
      esac
    done
    spec+=( ${fg:+fg=$fg} ${bg:+bg=$bg} )
    ZSH_HIGHLIGHT_STYLES[$syn]="${(j:,:)spec}"
  done
}
ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout
print -r - "typeset -gA ZSH_HIGHLIGHT_STYLES=( ${(kv@q+)ZSH_HIGHLIGHT_STYLES} )"

local -T ZLS_COLORS zls_colors=(
  "(events)=[[:space:]]#(|-)<->(#b)(*)=$(.lscolor no)=$color[faint]"
  "(history-lines)=(#b)([[:space:]]#<->)*=$(.lscolor no)=$color[faint]"
)
local -A comp_colors=(
  'file-descriptors'  "$syntax_colors[numeric-fd]"

  '(aliases|builtins|executables|functions|commands)' 'ex'
  'suffix-aliases'  'ex'
  'options'         'sg'
  'reserved-words'  'su'

  'glob(flags|quals)' 'di'

  '(global-aliases|modifiers|parameters)' 'ln'

  '*local*~*director*'        'ln'
  '*(branch|head)*~*remote*'  'ln'
  '*remote*~*(branch|head)*'  'so'
  '*commit*~*-tag'            'pi'
  '*-tag*~*commit*'           'cd'
)
() {
  local comp col
  for comp col in ${(kv@)comp_colors}; do
    col=$(.lscolor $col)
    zls_colors+=(
      "($comp)=(*~(?*  *))(#b)((  *)|)=$col=$color[none];$color[faint]"
    )
  done
}
zls_colors+=(
  "(*~*(directories|files|expansions))=(*~(?*  *))(#b)((  *)|)=$color[none]=$color[faint]"
  "$ls_colors[@]"
  "tc=$(.lscolor no)"
  "sp=$(.lscolor fi)"
  "sa=$(.lscolor ex)"
  "ma=$color[brightwhite];$color[bg-brightblue]"
)

print-style() {
  zstyle "$@"
  zstyle -L $1 $2
}
print-style ':completion:*:default' list-colors "$zls_colors[@]"
print-style ':completion:*' group-name ''
print-style ':completion:*' list-separator ' '
unfunction print-style

local -A git_colors=(
  color.branch.current        "$(.lscolor ln);$color[bg-blue]"
  color.branch.plain          "$(.lscolor ln)"
  color.branch.local          "$(.lscolor ln)"
  color.branch.remote         "$(.lscolor so)"
  color.branch.upstream       "$(.lscolor so)"

  color.decorate.HEAD         "$(.lscolor ln);$color[italic]"
  color.decorate.branch       "$(.lscolor ln)"
  color.decorate.remotebranch "$(.lscolor so)"
  color.decorate.tag          "$(.lscolor cd)"
  color.decorate.stash        "$(.lscolor mi)"
  color.decorate.grafted      "$(.lscolor or)"

  color.diff.commit     "$(.lscolor pi)"
  # color.diff.context
  # color.diff.frag
  color.diff.func       "$(.lscolor ex)"
  # color.diff.meta
  # color.diff.new
  # color.diff.newMoved
  # color.diff.old
  # color.diff.oldMoved
  color.diff.whitespace "$(.lscolor no)"

  color.grep.column     "$(.lscolor mi)"
  # color.grep.context
  color.grep.filename   "$(.lscolor fi)"
  color.grep.function   "$(.lscolor ex)"
  color.grep.linenumber "$(.lscolor mi)"
  # color.grep.match
  # color.grep.selected
  # color.grep.separator

  color.interactive.header  "$(.lscolor no)"
  color.interactive.error   "$(.lscolor or)"
  color.interactive.help    "$(.lscolor mi)"
  # color.interactive.prompt

  color.remote.success  "$color[green]"
  color.remote.warning  "$color[yellow]"
  color.remote.error    "$color[red]"
  color.remote.hint     "$color[faint]"

  color.status.header       "$(.lscolor no)"
  color.status.branch       "$(.lscolor ln)"
  color.status.localbranch  "$(.lscolor ln)"
  color.status.remotebranch "$(.lscolor so)"
  color.status.nobranch     "$(.lscolor or)"
  color.status.added        "$color[green]"
  color.status.updated      "$color[green]"
  color.status.changed      "$color[yellow]"
  color.status.unmerged     "$color[red]"
  color.status.untracked    "$color[faint]"
)

unfunction .lscolor

() {
  local -a spec
  local -i num
  local slot col fg bg tmp
  for slot col in "${(kv@)git_colors}"; do
    spec=() fg='' bg='' tmp=''
    for num in ${(s.;.)col}; do
      case $tmp$num in
        1)
          spec+=( bold )
          ;;
        2)
          spec+=( dim )
          ;;
        3)
          spec+=( italic )
          ;;
        4)
          spec+=( ul )
          ;;
        5)
          spec+=( blink )
          ;;
        7)
          spec+=( reverse )
          ;;
        9)
          spec+=( strike )
          ;;
        (38|48)(|\;5))
          tmp+="$num;"
          ;;
        38\;5\;<0-15>)
          fg=$color[$tmp$num]
          tmp=''
          ;;
        48\;5\;<0-15>)
          bg=${color[$tmp$num]#bg-}
          tmp=''
          ;;
      esac
    done
    spec=( ${fg:-normal} ${bg:-normal} $spec[@] )
    if (( $#spec[@] )); then
      git config --global $slot "$spec"
    else
      git config --global --unset $slot
    fi
  done
}
