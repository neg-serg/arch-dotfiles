#compdef git-annex
#description:managing files while ignoring their content

# ZSH Completion for git-annex (http://git-annex.branchable.com/)
#
# This completion was written for git-annex version: 3.20111011~bpo60+2
#
# Note that this completion is still very much early alpha work in progress.
#
# Skeleton implementation by Frank Terbeck <ft@bewatermyfriend.org>
# Blanks filled in by Valentin Haenel <valentin.haenel@gmx.de>
# Licence: WTFPL (http://sam.zoy.org/wtfpl/)
#
# To use this completion drop it somewhere in you $fpath, e.g.:
#
#     $ git clone $CLONEURL
#     $ fpath+=$PWD/git-annex-zsh-completion
#     $ compinit git-annex

local state line context
local -A opt_args

local -a arguments
arguments=(
    '--and[both previous and next option match]'
    '(-a --auto)'{-a,--auto}'[automatic mode]'
    '(-d --debug)'{-d,--debug}'[show debug messages]'
    '(-x --exclude=)'{-x,--exclude=}'[skips files matching the globbing pattern]'
    '(-b --backend=)'{-b,--backend=}'[specifies which key-value backend to use]'
    '-c name=-[override git configuration settings]'
    '(-C --copies=)'{-C,--copies=}'[skip files with fewer copies]'
    '--force[force unsafe actions]'
    '(-f --from=)'{-f,--from}'[copy/move from repository]'
    '(-F --fast)'{-F,--fast}'[less expensive version of some commands]'
    '(-i --in=)'{-i,--in=}'[skip files not present in a remote]'
    '(-j --json)'{-j,--json}'[generate machine readable JSON]'
    '(-k --key=)'{-k,--key=}'[specifies a key to operate on]'
    '(-N --numcopies=)'{-N,--numcopies=}'[overrides annex.numcopies]'
    '--not[negate next option]'
    '--or[either previous or next option match]'
    '(-t --to=)'{-t,--to=}'[copy/move to repository]'
    '--semitrust=-[override trust settings]'
    '--trust=-[override trust settings]'
    '--untrust=-[override trust settings]'
    '--verbose[verbose display]'
    '--quiet'
    '-([open group of options]'
    '-)[close group of options]'
    ': :->command'
    '*:: :->subcmd'
)

_arguments -C $arguments

case $state in
(command)
    local -a cmds
    cmds=(
        add:'adds files in the path to the annex'
        addurl:'downloads each url to a file, which is added to the annex.'
        copy:'copy from/to repositories'
        drop:'drops the content of annexed files from this repository'
        dropkey:'drop annexd data for specified keys'
        dropunused:'drop unused data, as reported by unused'
        describe:'changes the description of a repository'
        edit:'alias for the unlock command'
        find:'search for present/missing files in current annex'
        fix:'fix up symlinks that have become broken'
        fromkey:'set file to link to given key'
        fsck:'check annex consistency'
        get:'makes the content of annexed files available in this repository'
        init:'initialize an annex'
        initremote:'set up a special remote'
        lock:'lock file again after editing'
        map:'generate a visual map of repositories'
        merge:'merge the git-annex branches of remotes'
        migrate:'migrate annexd files to new backend'
        move:'move files from/to repositories'
        pre-commit:'fixes up symlinks that are staged as part of a commit'
        semitrust:'returns a repository to the default semi trusted state'
        status:'displays some statistics and other information'
        setkey:'sets the annexed data for a key to the content of the specified file, and then removes the file.'
        trust:'records that a repository is trusted to not  unexpectedly  lose  content'
        unannex:'undo an accidental git annex add command'
        uninit:'stop using git-annex entirely'
        unlock:'unlock a file for editing'
        untrust:'records that a repository is not trusted and could lose content at any time'
        unused:'check for data that has no symlinks pointing to it'
        upgrade:'upgrades the repository to current layout'
        version:'print version and repository information'
        whereis:'show all repositories that contain a file'
    )
    _describe -t commands command cmds
    ;;
(subcmd)
    case ${line[1]} in
    (map|status)
        _message 'No more arguments'
        ;;
    (*)
        _path_files
        ;;
    esac
    ;;
esac

