#!/bin/dash
. $ENV
cache="$HOME/tmp"
ff="$cache/sxiv.$$"
tmp_wall="$cache/wall_sxiv.$$"
z="$XDG_DATA_HOME/sxiv/data"
last="$XDG_DATA_HOME/sxiv/last"
trash="$HOME/trash/1st-level/pic"
rofi_cmd="rofi -dmenu -sort -matching fuzzy -no-plugins -no-only-match -theme sxiv -custom"

rotate() {
    while read file; do mogrify -rotate "$1" "$file"; done
}

proc() {
    cmd="$1"
    tee "$ff"
    if [ -z "$dest" ]; then
        dest=$(_FASD_DATA="$z" fasd -tlR \
            | sed 's:^'$HOME':~:' \
            | $rofi_cmd -p "⟬$cmd⟭ ❯>"  \
            | sed 's:^~:'$HOME':')
    fi
    [ -z "$dest" ] && exit 0
    old_ifs=$IFS
    IFS="$(echo)"
    if [ -d "$dest" ]; then
        while read line; do
            $cmd "$(realpath $line)" $dest
        done < "$(realpath "$ff")"
        _FASD_DATA="$z" fasd -RA "$dest"
        printf "%s\n" "$cmd \"$dest\"" > "$last"
    else
        _FASD_DATA="$z" fasd -D "$dest"
    fi
    IFS=$old_ifs
    trap finish EXIT
}

repeat_action() {
    tee "$ff"
    old_ifs=$IFS
    IFS="$(echo)"
    fname="$(realpath $(cat "$ff"))"
    last="$(cat "$last" | xargs)"
    cmd=$(echo $last | awk '{print $1}')
    dest=$(echo $last | awk '{print $2}')
    if [ $cmd = 'mv' ] || [ $cmd = 'cp' ]; then
        $cmd "$fname" "$dest"
    fi
    IFS=$old_ifs
    trap finish EXIT
}

copy_name() {
    tee "$ff"
    fname="$(realpath "$(cat "$ff")")"
    echo "$fname" | xsel -bi
    ~/bin/pic-notify "$fname"
    trap finish EXIT
}

wall() {
    action="$1"
    wallarg=""
    specarg=""
    case $action in
        center) wallarg="-center";;
        tile) wallarg="-tile";;
        fill) wallarg="-fill";;
        full) wallarg="-full";;
        cover) wallarg="-full";;
        mono) specarg="mono";;
        retro) specarg="retro";;
    esac
    tee "$tmp_wall"
    if [ -z $specarg ]; then
        while read wall; do
            hsetroot $wallarg "$wall" &
        done < "$tmp_wall"
    elif [ $specarg = 'mono' ]; then
        while read wall; do make_mono "$wall"
        done < "$tmp_wall"
    elif [ $specarg = 'retro' ]; then
        while read wall; do make_retro "$wall"
        done < "$tmp_wall"
    fi
}

make_mono(){
    convert "$1" -colors 2 "$cache/mono__$(basename $1)"
    hsetroot -full "$cache/mono__$(basename $1)"
    rm "$cache/mono__$(basename $1)"
}

make_retro(){
    convert "$1" -colors 12 "$cache/retro__$(basename $1)"
    hsetroot -full "$cache/retro__$(basename $1)"
    rm "$cache/retro__$(basename $1)"
}

finish() {
    rm -f "$ff"
}

case "$1" in
    "C-comma") rotate 270 ;;
    "C-less") rotate -90 ;;
    "C-period") rotate 90 ;;
    "C-slash") rotate 180 ;;
    "c") copy_name ;;
    "r") repeat_action ;;
    "v") proc mv ;;
    "C-c") proc cp ;;
    "C-d") dest="$HOME/trash/1st_level/pic"  proc mv ;;
    "C-1") wall "center" ;;
    "C-2") wall "fill" ;;
    "C-3") wall "full" ;;
    "C-4") wall "tile" ;;
    "C-5") wall "mono" ;;
    "C-6") wall "retro" ;;
    "C-w") wall "cover" ;;
esac
