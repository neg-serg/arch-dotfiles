#!/bin/dash
. $ENV

cache="$HOME/tmp"
file1="$cache/sxiv1.$$"
file2="$cache/sxiv2.$$"
tmp_wall="$cache/wall_sxiv.$$"

z="$XDG_DATA_HOME/sxiv/data"
last="$XDG_DATA_HOME/sxiv/last"
trash="$HOME/trash/1st-level/pic"

rofi_cmd="rofi -dmenu -sort -matching fuzzy -no-plugins -no-only-match -theme sxiv -custom"

resolve_file() {
    if [ ! -L "$1" ] && [ -f "$1" ]; then
        echo "$(readlink -f $1)"
    elif [ -L "$1" ]; then
        print "$(cd $(dirname $1) && pwd -P)/$(basename $1)"
    else
        echo "$1"
    fi
}

rotate() {
    degree="$1"
    while read file; do
        mogrify -rotate "$degree" "$file"
    done
}

proc() {
    cmd="$1";
    tee "$file1"
    if [ -z "$dest" ] ; then
        dest=$(_FASD_DATA="$z" fasd -tlR \
            | sed 's:^'$HOME':~:' \
            | eval $rofi_cmd -p "\"⟬$cmd⟭ ❯> \"" \
            | sed 's:^~:'$HOME':')
    fi
    [ -z "$dest" ] && exit 0
    if [ -d "$dest" ]; then
        while read line; do
            eval $cmd "$(resolve_file $line)" $dest
        done < "$file1"
        _FASD_DATA="$z" fasd -RA "$dest"
        printf "%s\n" "$cmd "$dest"" > "$last"
    else
        _FASD_DATA="$z" fasd -D "$dest"
    fi
    trap finish EXIT
}

repeat_action() {
    tee "$file2"
    fp=$(cat "$file2")
    fname="$(resolve_file $fp)"
    last="$(cat "$last" | xargs)"
    cmd=$(echo $last | awk '{print $1}')
    dest=$(echo $last | awk '{print $2}')
    if [ $cmd = 'mv' ] || [ $cmd = 'cp' ]; then
        eval "$cmd $fname $dest"
    fi
    trap finish EXIT
}

delete() {
    tee "$file1"
    [ -z "$trash" ] || [ ! -d "$trash" ] && exit 0
    while read line; do
        eval $(echo mv $(echo \"$(resolve_file $line)\") $trash)
    done < "$file1"
    printf "%s\n" "mv "$trash"" > "$last"
    trap finish EXIT
}

copy_name() {
    tee "$file2"
    fp=$(cat "$file2")
    fname="$(resolve_file $fp)"
    echo "$fname" | xsel -bi
    ~/bin/scripts/pic_notify "$fname"
    trap finish EXIT
}

wall() {
    action="$1"
    wallarg=""
    specarg=""
    case $action in
        c*) wallarg="-center" ;;
        t*) wallarg="-tile" ;;
        fi*) wallarg="-fill" ;;
        fu*) wallarg="-full" ;;
        mono) specarg="plus"
    esac
    tee "$tmp_wall"
    if [ -z $specarg ]; then
        while read wall; do
            hsetroot $wallarg "$wall" &
        done < "$tmp_wall"
    else
        while read wall; do
            convert "$wall" -colors 2 "$cache/__$(basename $wall)"
            hsetroot -full "$cache/__$(basename $wall)"
            rm "$cache/__$(basename $wall)"
        done < "$tmp_wall"
    fi
}

finish() {
    rm -f "$file1" "$file2"
}

case "$1" in
    "C-comma") rotate 270 ;;
    "C-less") rotate -90 ;;
    "C-period") rotate 90 ;;
    "C-slash") rotate 180 ;;
    "c") copy_name ;;
    "r") repeat_action ;;
    "v") proc mv ;;
    "C-c") proc cp ;;
    "C-d") delete ;;
    "C-e") wall "full" ;;
    "C-m") wall "mono" ;;
    "C-q") wall "center" ;;
    "C-t") wall "tile" ;;
    "C-w") wall "fill" ;;
esac
