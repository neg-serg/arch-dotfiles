#!/bin/dash
. $ENV
cache="$HOME/tmp"
ff="$cache/sxiv.$$"
tmp_wall="$cache/wall_sxiv.$$"
z="$XDG_DATA_HOME/sxiv/data"
last="$XDG_DATA_HOME/sxiv/last"
trash="$HOME/trash/1st-level/pic"
rofi_cmd="rofi -dmenu -sort -matching fuzzy -no-plugins -no-only-match -theme sxiv -custom"

rotate() {
    while read file; do mogrify -rotate "$1" "$file"; done
}

proc() {
    cmd="$1"
    tee "$ff"
    if [ -z "$dest" ]; then
        dest=$(_FASD_DATA="$z" fasd -tlR \
            | sed 's:^'$HOME':~:' \
            | $rofi_cmd -p "⟬$cmd⟭ ❯>"  \
            | sed 's:^~:'$HOME':')
    fi
    [ -z "$dest" ] && exit 0
    old_ifs=$IFS
    IFS="$(echo)"
    if [ -d "$dest" ]; then
        while read line; do
            $cmd "$(realpath $line)" $dest
        done < "$(realpath "$ff")"
        _FASD_DATA="$z" fasd -RA "$dest"
        printf "%s\n" "$cmd \"$dest\"" > "$last"
    else
        _FASD_DATA="$z" fasd -D "$dest"
    fi
    IFS=$old_ifs
    trap finish EXIT
}

repeat_action() {
    tee "$ff"
    old_ifs=$IFS
    IFS="$(echo)"
    fname="$(realpath $(cat "$ff"))"
    last="$(cat "$last" | xargs)"
    cmd=$(echo $last | awk '{print $1}')
    dest=$(echo $last | awk '{print $2}')
    if [ $cmd = 'mv' ] || [ $cmd = 'cp' ]; then
        $cmd "$fname" "$dest"
    fi
    IFS=$old_ifs
    trap finish EXIT
}

copy_name() {
    tee "$ff"
    fname="$(realpath "$(cat "$ff")")"
    echo "$fname" | xsel -bi
    ~/bin/scripts/pic-notify "$fname"
    trap finish EXIT
}

wall() {
    action="$1"
    wallarg=""
    specarg=""
    case $action in
        center) wallarg="-center" ;;
        tile) wallarg="-tile" ;;
        fill) wallarg="-fill" ;;
        full) wallarg="-full" ;;
        cover) wallarg="-full" ;;
        mono) specarg="plus"
    esac
    tee "$tmp_wall"
    if [ -z $specarg ]; then
        while read wall; do
            hsetroot $wallarg "$wall" &
        done < "$tmp_wall"
    else
        while read wall; do
            convert "$wall" -colors 2 "$cache/__$(basename $wall)"
            hsetroot -full "$cache/__$(basename $wall)"
            rm "$cache/__$(basename $wall)"
        done < "$tmp_wall"
    fi
}

finish() {
    rm -f "$ff" "$ff"
}

case "$1" in
    "C-comma") rotate 270 ;;
    "C-less") rotate -90 ;;
    "C-period") rotate 90 ;;
    "C-slash") rotate 180 ;;
    "c") copy_name ;;
    "r") repeat_action ;;
    "v") proc mv ;;
    "C-c") proc cp ;;
    "C-d") dest="$HOME/trash/1st-level/pic"  proc mv ;;
    "C-1") wall "full" ;;
    "C-2") wall "mono" ;;
    "C-3") wall "center" ;;
    "C-4") wall "tile" ;;
    "C-5") wall "fill" ;;
    "C-w") wall "cover" ;;
esac

# while read file
# do
#         case "$1" in
#         "w") setbg "$file" & ;;
#         "c")
# 		[ -z "$destdir" ] && destdir="$(sed "s/\s.*#.*$//;/^\s*$/d" ~/.config/bmdirs | awk '{print $2}' | dmenu -l 20 -i -p "Copy file(s) to where?" | sed "s|~|$HOME|g")"
# 		[ -z "$destdir" ] && exit
# 		cp "$file" "$destdir" && notify-send -i "$(readlink -f "$file")" "$file copied to $destdir." &
# 		;;
#         "m")
# 		[ -z "$destdir" ] && destdir="$(sed "s/\s.*#.*$//;/^\s*$/d" ~/.config/bmdirs | awk '{print $2}' | dmenu -l 20 -i -p "Move file(s) to where?" | sed "s|~|$HOME|g")"
# 		[ -z "$destdir" ] && exit
# 		mv "$file" "$destdir" && notify-send -i "$(readlink -f "$file")" "$file moved to $destdir." &
# 		;;
# 	"r")
# 		convert -rotate 90 "$file" "$file" ;;
# 	"R")
# 		convert -rotate -90 "$file" "$file" ;;
# 	"f")
# 		convert -flop "$file" "$file" ;;
# 	"y")
# 		echo -n "$file" | xclip -selection clipboard &&
# 		notify-send "$file copied to clipboard" & ;;
# 	"Y")
# 		readlink -f "$file" | xclip -selection clipboard &&
# 			notify-send "$(readlink -f "$file") copied to clipboard" & ;;
# 	"d")
# 		[ "$(printf "No\\nYes" | dmenu -i -p "Really delete $file?")" = "Yes" ] && rm "$file" && notify-send "$file deleted." ;;
# 	"g")	ifinstalled gimp && gimp "$file" & ;;
#         esac
# done

