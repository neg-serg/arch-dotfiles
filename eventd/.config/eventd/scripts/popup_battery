#!/bin/bash

BATTERY_ID='BAT1'
BATTERY_PATH="/sys/class/power_supply/$BATTERY_ID"

BATTERY_ICON_CHARGING=''
BATTERY_ICON_HIGH=''
BATTERY_ICON_MEDIUM=''
BATTERY_ICON_LOW=''

BATTERY_WARN_LEVEL=10

BATTERY_COLOR_URGENT='RRR'
BATTERY_COLOR_WARN='E44'
BATTERY_COLOR_CHARGE='EB4'

BATTERY_UUID=`uuidgen`

status_battery(){
	local capacity="${1:-`cat "$BATTERY_PATH"/capacity`}"
	local status="${2:-`cat "$BATTERY_PATH"/status`}"

	if [[ "$status" = "Discharging" ]]; then
		if ((capacity >= 75)); then
			icon=$BATTERY_ICON_HIGH
		elif ((capacity >= 25)); then
			icon=$BATTERY_ICON_MEDIUM
		else
			icon=$BATTERY_ICON_LOW
		fi

		if ((capacity <= BATTERY_WARN_LEVEL)); then
			color=$BATTERY_COLOR_URGENT
		fi
	else
		icon=$BATTERY_ICON_CHARGING
		color=$BATTERY_COLOR_CHARGE
	fi

	markup $icon $capacity% $color
}

update_battery(){
	local status="`status_battery $1 $2`"
	popup "${status//#RRR/#$BATTERY_COLOR_WARN}" $BATTERY_UUID "$3"
}

watch_battery_shared(){
	local capacity=$(cat "$BATTERY_PATH"/capacity)
	local status=$(cat "$BATTERY_PATH"/status)

	if [[ "$capacity" -le "$BATTERY_WARN_LEVEL" && "$status" = "Discharging" && "$capacity" != "$battery_last_capacity" ]]; then
		update_battery $capacity $status 2
	elif [[ "$status" != "$battery_last_status" ]]; then
		update_battery $capacity $status
	fi

	battery_last_status="$status"
	battery_last_capacity="$capacity"
}

watch_battery(){
	# TODO: improve, this is barely working, I might be hardware-limited
	while read -r _; do
		watch_battery_shared
	done < <(acpi_listen) &

	# acpi only outputs on charging state change
	# we'll have to do trickle checks for capacity
	while true; do
		watch_battery_shared
		sleep 10
	done
}
