[section/base]
include-file = $XDG_CONFIG_HOME/polybar/common.cfg
include-file = $XDG_CONFIG_HOME/polybar/modules.cfg
include-file = $XDG_CONFIG_HOME/polybar/decor.cfg
include-file = $XDG_CONFIG_HOME/polybar/neg_mods.cfg
include-file = $XDG_CONFIG_HOME/polybar/tray.cfg

[global/wm]
monitor = ${env:MONITOR:HDMI-0}
monitor-fallback = HDMI-0
monitor-strict = false

wm-restack = i3

[settings]
; Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
screenchange-reload = true

; compositing-background = screen
; compositing-foreground = lighten
; compositing-overline = lighten
; compositing-underline = lighten
; compositing-border = lighten

# Define fallback values used by all module formats
format-foreground = 
format-background = 
format-underline =
format-overline =
format-spacing =
format-padding =
format-margin =
format-offset =

; The throttle settings lets the eventloop swallow up til X events
; if they happen within Y millisecond after first event was received.
; This is done to prevent flood of update event.
;
; For example if 5 modules emit an update event at the same time, we really
; just care about the last one. But if we wait too long for events to swallow
; the bar would appear sluggish so we continue if timeout
; expires or limit is reached.
throttle-output = 5
throttle-output-for = 10

; Time in milliseconds that the input handler will wait between processing events
throttle-input-for = 30

[bar/main]
; Tell the Window Manager not to configure the window.
; Use this to detach the bar if your WM is locking its size/position.
override-redirect = false

; Prefer fixed center position for the `modules-center` block
; When false, the center position will be based on the size of the other blocks.
fixed-center = true

bottom=true

border-top-size = ${border.t}
border-bottom-size = ${border.b}
border-left-size = ${border.l}
border-right-size = ${border.r}

border-top-color = ${color.border_top}
border-bottom-color = ${color.border_top}
border-left-color = ${color.border_top}
border-right-color = ${color.border_top}

width = 100%
height = 27

enable-ipc = true

padding = 0
offset-x = 0%
offset-y = 0%
separator =

radius-top = 0.0
radius-bottom = 0.0

overline-size = 2
overline-color = ${color.ac}

module-margin-right = 0
module-margin-left  = 0

modules-left = start time start-dark ws right-end-top left-end-bottom start-br xkeyboard right-end-top left-end-bottom start-br networkeno1 networkenp6s0 networkenp7s0 right-end-top 
modules-center =
modules-right = left-end-top start-mpd mpd volume end

background = ${color.background}
foreground = ${color.foreground}

underline-size = 2

; Opacity value between 0.0 and 1.0 used on fade in/out
dim-value = 1.0

; Locale used to localize various module data (e.g. date)
; Expects a valid libc locale, for example: sv_SE.UTF-8
locale = 

; Value to be used to set the WM_NAME atom
; If the value is empty or undefined, the atom value
; will be created from the following template: polybar-[BAR]_[MONITOR]
; NOTE: The placeholders are not available for custom values
wm-name = 

; Fallback click handlers that will be called if
; there's no matching module handler found.
click-left = 
click-middle = 
click-right =
scroll-up =
scroll-down =
double-click-left =
double-click-middle =
double-click-right =

; Requires polybar to be built with xcursor support (xcb-util-cursor)
; Possible values are:
; - default   : The default pointer as before, can also be an empty string (default)
; - pointer   : Typically in the form of a hand
; - ns-resize : Up and down arrows, can be used to indicate scrolling
cursor-click = 
cursor-scroll = 

; Framerate in milliseconds
animation-charging-framerate = 500
poll-interval = 5
pseudo-transparency = false

font-0 = ${font.font-0}
font-1 = ${font.font-1}
font-2 = ${font.font-2}
font-3 = ${font.font-3}
font-4 = ${font.font-4}
font-5 = ${font.font-5}
font-6 = ${font.font-6}

; vim:ft=conf
