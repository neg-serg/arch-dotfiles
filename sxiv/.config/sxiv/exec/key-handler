#!/bin/zsh

cmds_=("cp" "mv")

resolve_file() {
    if  [[ ! -L "${1}" && -f "${1}" ]]; then
        echo $(readlink -f "${1}")
    elif [[ -L "${1}" ]]; then
        builtin print "$(cd $(dirname "${1}") && pwd -P)/$(basename "${1}")"
    elif [[ "${1#/}" == "${1}" ]]; then
        echo "$(pwd)/${1}"
    else
        echo "${1}"
    fi
}

resolve_file2() {
    if [[ -f "${1}" ]]; then
        builtin print "$(cd $(dirname "${1}") && pwd -P)/$(basename "${1}")"
    elif [[ "${1#/}" == "${1}" ]]; then
        builtin print "$(pwd)/${1}"
    else
        builtin print "${1}"
    fi
}

opt="$1";

readonly tmpfs="/tmp"
readonly TAGFILE="${XDG_CONFIG_HOME}/sxiv/tags"

readonly tmp_file="${tmpfs}/sxiv.$$"
readonly tmp_file2="${tmpfs}/sxiv2.$$"
readonly tmp_imgur="${tmpfs}/sxiv_imgur.$$"
readonly tmp_wall="${tmpfs}/wall_sxiv.$$"

readonly z_data_file="${XDG_DATA_HOME}/sxiv_do.data"
readonly last_action="${XDG_DATA_HOME}/sxiv_do.last"

readonly width_x11_=$(xrandr -q |awk '/Screen/{print $8}')
readonly width_="$[${width_x11_}-70]"
readonly lines_=12

readonly trash_dir="${HOME}/trash/1st-level/pic"

readonly rofi_cmd=(
    rofi -dmenu 
    -opacity "${opacity_}"
    -theme-str "'#window { width:${width_}; y-offset: 20; location: north; anchor: north; }'"
    -theme-str "'#listview { lines:${lines_}; }'"
    -sort
    -matching fuzzy
    -no-plugins
    -no-only-match
    -custom
)

finish_() {
    rm -f "${tmp_file}" "${tmp_file2}" "${tmp_imgur}"
}

rotate() {
    local degree="${1}"
    while read file; do
        case "$(file -b -i "${file}")" in
        image/jpeg*) jpegtran -rotate "${degree}" -copy all -outfile "${file}" "${file}" ;;
        *)           mogrify  -rotate "${degree}" "${file}" ;;
        esac
    done
}

rename() {
    >>"${tmp_file}"
    dest=$(printf "%s" "$(basename "${fp}")" | eval $(echo ${rofi_cmd} -p '"[rem] >> "'))
    [[ -n "${dest}" ]] && \
        fp=$(< "${tmp_file}") && \
        mv "${fp}" "$(dirname "${fp}")/${dest}"
    trap finish_ EXIT
}

by_rating() { 
    sort -r -t '|' -nk2 "${z_data_file}" \
    | mawk -F '|' '{print $1}' 
}

by_fasd_last_use() {
    _FASD_DATA="${XDG_DATA_HOME}/sxiv_do.data" fasd -tlR
}

proc() {
    alias ourcmd_=by_fasd_last_use
    local action="$1"
    (( ${cmds_[(I)${action}]} )) && { cmd="${action}"; cmd_w="${action}" }
    >>"${tmp_file}"
    if [[ -z "${dest}" ]] ; then
        dest=$(ourcmd_ | sed 's:^'${HOME}':~:' \
      | eval $(echo ${rofi_cmd} -p "\"⟬${cmd}⟭ ❯> \"") \
      | sed 's:^~:'${HOME}':')
    fi
    [[ -z "${dest}" ]] && exit 0
    if [[ -d "${dest}" ]]; then
        while read line; do
            file_name="$(resolve_file ${line})"
            eval $(echo ${cmd} \"${file_name}\" ${dest})
        done < "${tmp_file}"
        _FASD_DATA="${z_data_file}" fasd -RA "${dest}"
        printf "%s\n" "${cmd_w} "${dest}"" > "${last_action}"
    else
        _FASD_DATA="${z_data_file}" fasd -D "${dest}"
    fi

    unalias ourcmd_

    trap finish_ EXIT
}

delete() {
    >>"${tmp_file}"
    [[ -z "${trash_dir}" || ! -d "${trash_dir}" ]] && exit 0
    while read line; do
        file_name="$(resolve_file ${line})"
        eval $(echo mv $(echo \"${file_name}\") ${trash_dir})
    done < "${tmp_file}"
    printf "%s\n" "mv "${trash_dir}"" > "${last_action}"
    trap finish_ EXIT
}

rep() {
    >"${tmp_file}"
    file=($(< "${last_action}"))
    local action=${file[1]} 
    local dest=${file[2]}
    [[ ! -d "${dest}" ]] && exit 0
    while read line; do
        file_name="$(resolve_file ${line})"
        (( ${cmds_[(I)${action}]} )) && cmd="${action}"
        eval $(echo ${cmd} $(echo \"${file_name}\") ${dest})
    done < ${tmp_file}
    trap finish_ EXIT
}

copy_name() {
    >>"${tmp_file2}"
    local fp=$(< "${tmp_file2}")
    local fname="$(resolve_file ${fp})"
    xsel -bi <<< "${fname}"
    ~/bin/scripts/pic_notify "${fname}"
    trap finish_ EXIT
}

imgur_it() {
    >>"${tmp_imgur}"
    while read f; do
        fp="$(resolve_file ${f})"
        xsel -i <<< $(~/bin/img "${fp}" |tee -a ~/tmp/imgur_output_)
        xsel -i <<< $(xsel -o|awk '/original/{print $2}')
    done < "${tmp_imgur}"
    trap finish_ EXIT
}

wall(){
    local action="$1"
    local wallarg=()
    local specarg=()
    case ${action} in
        c*) wallarg=("-center") ;;
        t*) wallarg=("-tile") ;;
        fi*) wallarg=("-fill") ;;
        fu*) wallarg=("-full") ;;
        mono) specarg=("plus")
    esac
    >>"${tmp_wall}"
    if [[ -z ${specarg} ]]; then
        while read wall; do
            hsetroot ${wallarg[@]} "${wall}" &
        done < "${tmp_wall}"
    else
        while read wall; do
            convert "${wall}" -colors 2 "${tmpfs}/__$(basename ${wall})"
            hsetroot -full "${tmpfs}/__$(basename ${wall})"
            rm "${tmpfs}/__$(basename ${wall})"
        done < "${tmp_wall}"
    fi
}

case "${opt}" in
    "C-g")      tr '\n' '\0' | xargs -0 gimp & ;;
    "C-comma")  rotate 270 ;;
    "C-period") rotate  90 ;;
    "C-slash")  rotate 180 ;;
    "C-less")   rotate -90 ;;
    "C-d")      delete ;;
    "v")        proc mv ;;
    "C-c")      proc cp ;;
    "C-r")      rename ;;
    "r")        rep ;;
    "c")        copy_name ;;
    "C-q")      wall "center" ;;
    "C-w")      wall "fill" ;;
    "C-e")      wall "full" ;;
    "C-r")      wall "tile" ;;
    "C-t")      wall "mono" ;;
    "C-i")      imgur_it ;;
esac
