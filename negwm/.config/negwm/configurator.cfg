from enum import Enum, auto
from negwm.lib.keymap import keymap, bindmap

Δ, λ = bindmap, keymap
e = enumerate

Exec = 'exec --no-startup-id'
M1, M4, Sh, Ct = 'Mod1', 'Mod4', 'Shift', 'Control'
NegwmRestart = 'exec --no-startup-id systemctl --user restart negwm'

class IconsType(Enum):
    greek = auto()
    runes = auto()
    gothic = auto()

def workspaces(use=IconsType.gothic):
    if use == IconsType.greek:
        return [
            '︁ α:term',  ' β:web',   ' δ:dev',
            ' γ:doc',   ' ζ:draw',  '߷ θ:gfx',
            '✽ ρ:obs',   ' ξ:pic',   ' ι:games',
            ' η:sys',   ' λ:vm',    ' μ:wine'
        ]
    if use == IconsType.runes:
        return [
            '︁ ᚠ:term',  ' ᚢ:web',   ' ᚦ:dev',
            ' ᚨ:doc',   ' ᚱ:draw',  '߷ ᚲ:gfx',
            '✽ ᚷ:obs',   ' ᚹ:pic',   ' ᚺ:games',
            ' ᚾ:sys',   ' ᛁ:vm',    ' ᛃ:wine'
        ]
    if use == IconsType.gothic:
        return [
            '︁ 𐌰:term',  ' 𐌱:web',   ' 𐌲:dev',
            ' 𐌳:doc',   ' 𐌴:draw',  '߷ 𐌵:gfx',
            '✽ 𐌶:obs',   ' 𐌷:pic',   ' 𐌸:games',
            ' 𐌹:sys',   ' 𐌺:vm',    ' 𐌻:wine'
        ]

def mode_default(): return Δ([
    λ({
        f'{M4}+4': '~/bin/screenshot',
        f'{M4}+{Ct}+4': '~/bin/screenshot -r',
        f'{M4}+{Sh}+4': '/usr/bin/flameshot gui',
    }, fmt='exec {cmd}'),
    λ({
        f'{M1}+grave': '/usr/bin/rofi -show run -show-icons -disable-history -theme neg || rofi -show run || dmenu_run',
        f'{M4}+8': '~/bin/pl vol mute',
        f'{M4}+c': '~/bin/clip',
        f'{M4}+m': '/bin/zsh -c "~/bin/music-rename current"',
        f'{M4}+p': '~/bin/rofi-tmux-urls',
        f'{M4}+{Sh}+8': '~/bin/pl vol unmute',
        f'{M4}+{Sh}+9': '/usr/bin/dunstctl history-pop',
        f'{M4}+{Sh}+l': '~/bin/rofi-lutris',
        f'{M4}+{Sh}+m': '~/bin/main-menu',
        f'{M4}+{Sh}+p': '/bin/zsh -c /usr/bin/rofi-pass',
        f'{M4}+space': '/usr/bin/dunstctl close-all',
        f'{M4}+Return': '/usr/bin/i3-sensible-terminal',
        'XF86Sleep': '/usr/bin/systemctl suspend',
    }, fmt=f'{Exec} {{cmd}}'),
    λ(
        {f'{M4}+{key}': ['left','down','up','right'][n] for n,key in e('hjkl')} |
        {f'{M4}+{key}': ['parent','child'][n] for n,key in e('27')
    }, fmt='focus {cmd}'),
    λ({
        f'{M1}+{Ct}+a': 'parent',
        f'{M1}+{Ct}+c': 'child'
    }, fmt='focus {cmd}'),
    # move workspace to left and right monitors
    λ({
        f'{M4}+{Sh}+bracketleft': 'left',
        f'{M4}+{Sh}+bracketright': 'right',
    }, fmt='move workspace to output {cmd}'),
    λ({
        f'{M4}+apostrophe': f'reload; {NegwmRestart}',
        f'{M4}+backslash': f'reload; {NegwmRestart}; {Exec} polybar-msg cmd restart',
        f'{M4}+{Sh}+apostrophe': 'restart'
    }),
    λ({
        f'{M4}+grave': 'focus_next_visible',
        f'{M4}+{Sh}+grave': 'focus_prev_visible',
        f'{M1}+Tab': 'switch',
        f'{M4}+slash': 'switch',
    }, fmt='$lastgo {cmd}'),
    λ({
        f'{M4}+{Ct}+a': 'dialog',
        f'{M4}+{Ct}+s': 'geom_dump',
        f'{M4}+{Ct}+space': 'geom_restore',
        f'{M4}+s': 'hide_current',
        f'{M4}+3': 'next',
    }, fmt='$scratchpad {cmd}'),
    λ({
        f'{M4}+period': 'cmd next',
        f'{M4}+{Sh}+2': 'cmd play-pause',
        f'{M4}+comma': 'cmd previous',
        'XF86AudioLowerVolume': 'vol down',
        'XF86AudioRaiseVolume': 'vol up',
    }, fmt=f'{Exec} ~/bin/pl {{cmd}}'),
    λ({key: ['next','play','previous','stop'][n]
       for n,key in e(['XF86AudioNext','XF86AudioPlay','XF86AudioPrev','XF86AudioStop'])}
    , fmt=f'{Exec} ~/bin/pl cmd {{cmd}}'),
    λ({
        f'{M1}+{Ct}+g': '$menu/winact ws',
        f'{M1}+g': '$menu/winact win',
        f'{M4}+{Ct}+grave': '$menu/i3menu',
        f'{M4}+{Sh}+a': '$menu/winact attach',
        f'{M4}+{Sh}+s': '$menu/props',
        f'{M4}+{Sh}+d': '$menu/props del',
    }),
    λ({
        f'{M4}+{Ct}+q': 'kill',
        f'{M4}+q': 'fullscreen toggle',
        f'{M4}+y': 'sticky toggle',
        f'{M1}+{Ct}+s': 'layout stacking',
        f'{M1}+{Ct}+r': 'layout tabbed',
        f'{M1}+{Ct}+t': 'layout tabbed',
        f'{M1}+{Ct}+e': 'layout toggle split',
    }),
])

def mode_wallpaper(): return Δ([
    λ({
        '6': '~/bin/wl',
        f'{M4}+{Sh}+6': '~/bin/wl',
        f'{Sh}+6': '~/bin/wl',
        'm': '~/bin/wl-convert mono',
        'n': '~/bin/wl-convert normal',
        'r': '~/bin/wl-convert retro',
    }, fmt=f'{Exec} {{cmd}}'),
    λ({'': ['Space','q']}, exit=True),
    ], bind=f'{M4}+{Sh}+6', name='%{T4}'
)

def mode_resize(): return Δ([
    λ({
        'bottom': ['j','s'],
        'left': ['h','a'],
        'right': ['l','d'],
        'top': ['k','w'],
    }, fmt='$actions resize {cmd} 4'),
    λ({
        'bottom': [f'{Sh}+j',f'{Sh}+s'],
        'left': [f'{Sh}+h',f'{Sh}+a'],
        'right': [f'{Sh}+l',f'{Sh}+d'],
        'top': [f'{Sh}+k',f'{Sh}+w'],
    }, fmt='$actions resize {cmd} -4'),
    ], bind=f'{M4}+r', name='%{T4}%{T-}'
 )

def mode_spec(): return Δ([
    λ({
        'e': '[urgent=latest] focus',
        'l': 'exec ~/bin/x11lock',
        f'{Sh}+d': 'floating toggle',
        'i': '$menu/pulse input',
        'o': '$menu/pulse output',
        'm': '$menu/xprop',
        f'{Sh}+t': '$menu/xsettings gtk',
        f'{Sh}+i': '$menu/xsettings icon',
    }, exit=True),
    ], bind=f'{M1}+e', name='%{T4}%{T-}'
)

def mode_wm(): return Δ([
    λ({
        'grave': 'default',
        'minus': 'splith',
        'backslash': 'splitv',
        't': 'tabbed',
    }, fmt='layout {cmd}', exit=True),
    λ({f'Tab': 'toggle'}, fmt='layout {cmd}', exit=False),
    λ({
        'horizontal': [f'{Sh}+h',f'{Sh}+l'],
        'vertical': [f'{Sh}+j',f'{Sh}+k'],
    }, fmt='split', exit=True),
    λ({act: ['up','left','down','right'][n] for n,act in e('wasd')}, fmt='move {cmd}'),
    λ({f'{Sh}+{key}': ['hdown','hup','vleft','vright'][n] for n,key in e('wasd')} , fmt='$actions x2 {cmd}'),
    λ({
        f'{Sh}+plus': 'grow',
        'x': 'maxhor',
        'm': 'maximize',
        'y': 'maxvert',
        'c': 'none',
        f'{Sh}+c': 'resize',
        'revert_maximize': [f'{Sh}+m',f'{Sh}+x',f'{Sh}+y'],
        'shrink': [f'{Sh}+minus'],
    }, fmt='$actions'),
    ], bind=f'{M4}+minus', name='%{T4}%{T-}',
)

class configurator(Enum):
    workspaces=workspaces()
    mode_default=mode_default()
    mode_resize=mode_resize()
    mode_spec=mode_spec()
    mode_wm=mode_wm()
    mode_wallpaper=mode_wallpaper()

# vim:filetype=python
