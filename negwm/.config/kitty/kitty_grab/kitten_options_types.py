# generated by gen-config.py DO NOT edit

import typing
from kitty.conf.utils import KeyAction, KittensKeyMap
import kitty.conf.utils
from kitty.fast_data_types import Color
import kitty.fast_data_types
from kitty.types import ParsedShortcut
import kitty.types


option_names = (  # {{{
 'map',
 'select_by_word_characters',
 'selection_background',
 'selection_foreground')  # }}}


class Options:
    select_by_word_characters: str = ''
    selection_background: Color = Color(82, 148, 226)
    selection_foreground: Color = Color(255, 255, 255)
    map: typing.List[typing.Tuple[kitty.types.ParsedShortcut, kitty.conf.utils.KeyAction]] = []
    key_definitions: KittensKeyMap = {}
    config_paths: typing.Tuple[str, ...] = ()
    config_overrides: typing.Tuple[str, ...] = ()

    def __init__(self, options_dict: typing.Optional[typing.Dict[str, typing.Any]] = None) -> None:
        if options_dict is not None:
            null = object()
            for key in option_names:
                val = options_dict.get(key, null)
                if val is not null:
                    setattr(self, key, val)

    @property
    def _fields(self) -> typing.Tuple[str, ...]:
        return option_names

    def __iter__(self) -> typing.Iterator[str]:
        return iter(self._fields)

    def __len__(self) -> int:
        return len(self._fields)

    def _copy_of_val(self, name: str) -> typing.Any:
        ans = getattr(self, name)
        if isinstance(ans, dict):
            ans = ans.copy()
        elif isinstance(ans, list):
            ans = ans[:]
        return ans

    def _asdict(self) -> typing.Dict[str, typing.Any]:
        return {k: self._copy_of_val(k) for k in self}

    def _replace(self, **kw: typing.Any) -> "Options":
        ans = Options()
        for name in self:
            setattr(ans, name, self._copy_of_val(name))
        for name, val in kw.items():
            setattr(ans, name, val)
        return ans

    def __getitem__(self, key: typing.Union[int, str]) -> typing.Any:
        k = option_names[key] if isinstance(key, int) else key
        try:
            return getattr(self, k)
        except AttributeError:
            pass
        raise KeyError(f"No option named: {k}")


defaults = Options()
defaults.map = [
    # quit
    (ParsedShortcut(mods=0, key_name='q'), KeyAction('quit')),  # noqa
    # quit
    (ParsedShortcut(mods=0, key_name='ESCAPE'), KeyAction('quit')),  # noqa
    # confirm
    (ParsedShortcut(mods=0, key_name='ENTER'), KeyAction('confirm')),  # noqa
    # move
    (ParsedShortcut(mods=0, key_name='LEFT'), KeyAction('move', ('left',))),  # noqa
    # move
    (ParsedShortcut(mods=0, key_name='RIGHT'), KeyAction('move', ('right',))),  # noqa
    # move
    (ParsedShortcut(mods=0, key_name='UP'), KeyAction('move', ('up',))),  # noqa
    # move
    (ParsedShortcut(mods=0, key_name='DOWN'), KeyAction('move', ('down',))),  # noqa
    # move
    (ParsedShortcut(mods=0, key_name='PAGE_UP'), KeyAction('move', ('page_up',))),  # noqa
    # move
    (ParsedShortcut(mods=0, key_name='PAGE_DOWN'), KeyAction('move', ('page_down',))),  # noqa
    # move
    (ParsedShortcut(mods=0, key_name='HOME'), KeyAction('move', ('first',))),  # noqa
    # move
    (ParsedShortcut(mods=0, key_name='a'), KeyAction('move', ('first_nonwhite',))),  # noqa
    # move
    (ParsedShortcut(mods=0, key_name='END'), KeyAction('move', ('last_nonwhite',))),  # noqa
    # move
    (ParsedShortcut(mods=0, key_name='e'), KeyAction('move', ('last',))),  # noqa
    # move
    (ParsedShortcut(mods=4, key_name='HOME'), KeyAction('move', ('top',))),  # noqa
    # move
    (ParsedShortcut(mods=4, key_name='END'), KeyAction('move', ('bottom',))),  # noqa
    # move
    (ParsedShortcut(mods=4, key_name='LEFT'), KeyAction('move', ('word_left',))),  # noqa
    # move
    (ParsedShortcut(mods=4, key_name='RIGHT'), KeyAction('move', ('word_right',))),  # noqa
    # scroll
    (ParsedShortcut(mods=4, key_name='UP'), KeyAction('scroll', ('up',))),  # noqa
    # scroll
    (ParsedShortcut(mods=4, key_name='DOWN'), KeyAction('scroll', ('down',))),  # noqa
    # select_stream
    (ParsedShortcut(mods=1, key_name='LEFT'), KeyAction('select', ('stream', 'left'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=1, key_name='RIGHT'), KeyAction('select', ('stream', 'right'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=1, key_name='UP'), KeyAction('select', ('stream', 'up'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=1, key_name='DOWN'), KeyAction('select', ('stream', 'down'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=1, key_name='PAGE_UP'), KeyAction('select', ('stream', 'page_up'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=1, key_name='PAGE_DOWN'), KeyAction('select', ('stream', 'page_down'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=1, key_name='HOME'), KeyAction('select', ('stream', 'first'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=0, key_name='A'), KeyAction('select', ('stream', 'first_nonwhite'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=1, key_name='END'), KeyAction('select', ('stream', 'last_nonwhite'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=0, key_name='E'), KeyAction('select', ('stream', 'last'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=5, key_name='HOME'), KeyAction('select', ('stream', 'top'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=5, key_name='END'), KeyAction('select', ('stream', 'bottom'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=5, key_name='LEFT'), KeyAction('select', ('stream', 'word_left'))),  # noqa
    # select_stream
    (ParsedShortcut(mods=5, key_name='RIGHT'), KeyAction('select', ('stream', 'word_right'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=2, key_name='LEFT'), KeyAction('select', ('columnar', 'left'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=2, key_name='RIGHT'), KeyAction('select', ('columnar', 'right'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=2, key_name='UP'), KeyAction('select', ('columnar', 'up'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=2, key_name='DOWN'), KeyAction('select', ('columnar', 'down'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=2, key_name='PAGE_UP'), KeyAction('select', ('columnar', 'page_up'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=2, key_name='PAGE_DOWN'), KeyAction('select', ('columnar', 'page_down'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=2, key_name='HOME'), KeyAction('select', ('columnar', 'first'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=2, key_name='A'), KeyAction('select', ('columnar', 'first_nonwhite'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=2, key_name='END'), KeyAction('select', ('columnar', 'last_nonwhite'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=2, key_name='E'), KeyAction('select', ('columnar', 'last'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=6, key_name='HOME'), KeyAction('select', ('columnar', 'top'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=6, key_name='END'), KeyAction('select', ('columnar', 'bottom'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=6, key_name='LEFT'), KeyAction('select', ('columnar', 'word_left'))),  # noqa
    # select_columnar
    (ParsedShortcut(mods=6, key_name='RIGHT'), KeyAction('select', ('columnar', 'word_right'))),  # noqa
    # set_mode
    (ParsedShortcut(mods=0, key_name='v'), KeyAction('set_mode', ('visual',))),  # noqa
    # set_mode
    (ParsedShortcut(mods=4, key_name='v'), KeyAction('set_mode', ('block',))),  # noqa
    # set_mode
    (ParsedShortcut(mods=4, key_name='LeftBracket'), KeyAction('set_mode', ('normal',))),  # noqa
]
