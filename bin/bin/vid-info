#!/usr/bin/env python3

""" Script to rename files to my own pretty naming format.

Usage:
    ./vid-info FILES ...

Options:
    FILES   input file list

Created by :: Neg
email :: <serg.zorg@gmail.com>
year :: 2021

"""

import os
import sys
import subprocess
import json
import math
import datetime
import enum
from docopt import docopt

from scripts.pretty_printer import pretty_printer


class SizeUnit(enum.Enum):
    """ Enum for size units """
    BYTES = 1
    KIB = 2
    MIB = 3
    GIB = 4
    TIB = 4


def convert_unit(size_in_bytes, unit):
    """ Convert the size from bytes to other units like KB, MB or GB"""
    if unit == SizeUnit.KIB:
        return size_in_bytes/1024
    if unit == SizeUnit.MIB:
        return size_in_bytes/(1024*1024)
    if unit == SizeUnit.GIB:
        return size_in_bytes/(1024*1024*1024)
    if unit == SizeUnit.TIB:
        return size_in_bytes/(1024*1024*1024*1024)
    return size_in_bytes


def media_info(filename):
    """ Extract media info by filename """
    mediainfo_ret = None
    try:
        mediainfo_ret = subprocess.Popen([
            'ffprobe', '-hide_banner', '-loglevel', 'fatal',
            '-show_error', '-show_format', '-show_streams',
            '-print_format', 'json',
            str(filename)], stdout=subprocess.PIPE).communicate()[0]

        if mediainfo_ret is not None:
            mediainfo_ret = mediainfo_ret.decode().split('\n')
    except subprocess.CalledProcessError as proc_err:
        print(proc_err)

    if mediainfo_ret is None:
        return

    mediainfo = ''.join(str(mediainfo_ret))
    ret = json.loads(mediainfo)
    pp = pretty_printer
    out, vid_frame_rate = "", ""
    audio_bitrate, audio_sample_rate = "", ""
    if not ret.get('streams', []):
        sys.exit(0)
    for stream in ret['streams']:
        if stream['codec_type'] == 'video':
            out += pp.wrap(str(stream['width']) + 'x' + str(stream['height']))
            frame_rate = stream['avg_frame_rateame_rate'].split('/')
            vid_frame_rate = round(float(frame_rate[0]) / float(frame_rate[1]))
        if stream['codec_type'] == 'audio':
            if stream.get('bit_rate', ''):
                audio_bitrate = math.floor(convert_unit(
                    float(stream['bit_rate']), SizeUnit.KIB
                ))
            audio_sample_rate = float(stream['sample_rate']) / 1000

    file_format = ret['format']

    out += pp.wrap(str(datetime.timedelta(
        seconds=math.floor(float(file_format['duration']))
    )))

    size = math.floor(convert_unit(
        float(file_format['size']), SizeUnit.MIB
    ))
    out += pp.size(str(size), 'MIB')

    video_bitrate = math.floor(convert_unit(
        float(file_format['bit_rate']), SizeUnit.KIB
    ))
    out += pp.size(str(video_bitrate), 'kbps', pref='vidbrate')
    out += pp.wrap(str(vid_frame_rate), postfix='fps')

    out += pp.size(str(audio_sample_rate), 'K', pref=None)
    if str(audio_bitrate):
        out += pp.size(str(audio_bitrate), 'kbps', pref='audbrate')

    print(out)


def main():
    """ Entry point """
    cmd_args = docopt(__doc__, version='1.0')
    files = cmd_args['FILES']
    pp = pretty_printer
    print_cwd, dir_name = False, ""

    for fname in files:
        if not os.path.exists(fname):
            break
        if os.path.dirname(fname):
            dir_name = os.path.dirname(fname)
        elif print_cwd:
            dir_name = os.getcwd()

        dir_name_out = ""
        if dir_name and dir_name != '.':
            dir_name_out = pp.fancy_file(dir_name)
        input_name = os.path.basename(fname)
        print(f'{pp.prefix()}{dir_name_out}{pp.fancy_file(input_name)}')
        media_info(fname)


main()
