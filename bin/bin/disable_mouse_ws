#!/usr/bin/env python3

# Disable or enable mouse based on which workspace is activated

# This script requires the i3ipc and python-xlib packages to be installed
#
# https://github.com/altdesktop/i3ipc-python
# https://github.com/python-xlib/python-xlib

import sys
import subprocess

import i3ipc

from Xlib.display import Display
from Xlib.ext import xinput


# This is the list of workspaces to disabled the mouse for
MOUSE_DISABLED_WORKSPACES = ['3']
# MOUSE_DISABLED_WORKSPACES = ['3', '6'] # syntax for multiple workspaces

# Fill this in with the name of your mouse as displayed in the `xinput list` command
MOUSE_DEVICE_NAME = 'Device name from xinput list'

# Setup X display and screen with needed extension so we can hide the mouse
# cursor when we disable the mouse, and show it when we enable the mouse
XDISPLAY = Display()

if not XDISPLAY.has_extension('XFIXES'):
    if XDISPLAY.query_extension('XFIXES') is None:
        print('XFIXES extension not supported', file=sys.stderr)
        sys.exit(1)

# Need to call these to initialize the extensions but don't care about the values
_ = XDISPLAY.query_extension('XInputExtension')
_ = XDISPLAY.xinput_query_version()
_ = XDISPLAY.xfixes_query_version()

XSCREEN = XDISPLAY.screen()


def on_workspace_focus(i3, event):
    for ws in MOUSE_DISABLED_WORKSPACES:
        if event.current.name.startswith(ws) and not len(event.current.leaves()):
            XSCREEN.root.xfixes_hide_cursor()
            XDISPLAY.sync()
            subprocess.run(f'xinput disable "{MOUSE_DEVICE_NAME}"', shell=True)
            break
    else:
        XSCREEN.root.xfixes_show_cursor()
        XDISPLAY.sync()
        subprocess.run(f'xinput enable "{MOUSE_DEVICE_NAME}"', shell=True)


i3 = i3ipc.Connection()
i3.on('workspace::focus', on_workspace_focus)
i3.main()
