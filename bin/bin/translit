#!/usr/bin/python2
# -*- coding: utf-8 -*-

_table=(
    (u'\u0430', (u'a',) ),
    (u'\u0431', (u'b',) ),
    (u'\u0432', (u'v',) ),
    (u'\u0433', (u'g',) ),
    (u'\u0434', (u'd',) ),
    (u'\u0435', (u'e',) ),
    (u'\u0451', (u'jo',) ),
    (u'\u0436', (u'zh',) ),
    (u'\u0437', (u'z',) ),
    (u'\u0438', (u'i',) ),
    (u'\u0439', (u'jj',) ),
    (u'\u043a', (u'k',) ),
    (u'\u043b', (u'l',) ),
    (u'\u043c', (u'm',) ),
    (u'\u043d', (u'n',) ),
    (u'\u043e', (u'o',) ),
    (u'\u043f', (u'p',) ),
    (u'\u0440', (u'r',) ),
    (u'\u0441', (u's',) ),
    (u'\u0442', (u't',) ),
    (u'\u0443', (u'u',) ),
    (u'\u0444', (u'f',) ),
    (u'\u0445', (u'kh',) ),
    (u'\u0446', (u'c',) ),
    (u'\u0447', (u'ch',) ),
    (u'\u0448', (u'sh',) ),
    (u'\u0449', (u'shh',) ),
    (u'\u044a', (u'"',) ),
    (u'\u044b', (u'y',) ),
    (u'\u044c', (u"'",) ),
    (u'\u044d', (u'eh',) ),
    (u'\u044e', (u'ju',) ),
    (u'\u044f', (u'ja',) ),
    (u'\u0410', (u'A',) ),
    (u'\u0411', (u'B',) ),
    (u'\u0412', (u'V',) ),
    (u'\u0413', (u'G',) ),
    (u'\u0414', (u'D',) ),
    (u'\u0415', (u'E',) ),
    (u'\u0401', (u'Jo',u'JO') ),
    (u'\u0416', (u'Zh',u'ZH') ),
    (u'\u0417', (u'Z',) ),
    (u'\u0418', (u'I',) ),
    (u'\u0419', (u'Jj',u'JJ') ),
    (u'\u041a', (u'K',) ),
    (u'\u041b', (u'L',) ),
    (u'\u041c', (u'M',) ),
    (u'\u041d', (u'N',) ),
    (u'\u041e', (u'O',) ),
    (u'\u041f', (u'P',) ),
    (u'\u0420', (u'R',) ),
    (u'\u0421', (u'S',) ),
    (u'\u0422', (u'T',) ),
    (u'\u0423', (u'U',) ),
    (u'\u0424', (u'F',) ),
    (u'\u0425', (u'Kh',u'KH') ),
    (u'\u0426', (u'C',) ),
    (u'\u0427', (u'Ch',u'CH') ),
    (u'\u0428', (u'Sh',u'SH') ),
    (u'\u0429', (u'Shh',u'SHh',u'SHH') ),
    (u'\u042b', (u'Y',) ),
    (u'\u042d', (u'Eh',u'EH') ),
    (u'\u042e', (u'Ju',u'JU') ),
    (u'\u042f', (u'Ja',u'JA') )
    )

def _build_ambilist( pairs ) :
    m = {}
    for k,v in pairs :
        for i in xrange(len(k)) :
            k2 = k[:i+1]
            if k2 not in m :
                m[k2]=0
            m[k2] += 1
    return [ k for k,v in m.iteritems() if v>1 ]

_map_encode = dict( [ (x[0],x[1][0]) for x in _table ] )
_map_decode = dict( [ (y,x[0]) for x in _table for y in x[1] ] )
_alist = dict( [ (z,0) for z in _build_ambilist( [ (y,x[0]) for x in _table for y in x[1] ] ) ] )

def decode( object, errors='strict' ) :
    def _one_sym( pp, c ) :
        r,p=pp
        if p=="" :
            if c in _alist :
                return ( r, c )
            r.append( _map_decode.get(c,c) )
            return ( r, "" )
        else :
            p2 = p + c
            if p2 in _alist :
                return ( r, p2 )
            if p2 in _map_decode :
                r.append( _map_decode[p2] )
                return ( r, "" )
            r.append( _map_decode.get(p,p) )
            return ( r, c )
    r,p = reduce( _one_sym, object, ([],"") )
    if p!="" :
        r.append( _map_decode.get( p, p ) )
    return "".join(r)

def encode( object, errors='strict' ) :
    return "".join( [ _map_encode.get(x,x) for x in object ] )

if __name__=="__main__" :
    __progname__ = "translit.py"
    __version__ = "0.1.1"
    __textdomain__ = __progname__

    import locale
    locale.setlocale( locale.LC_ALL, "" )
    enc = locale.getpreferredencoding()

    import gettext
    translation = gettext.translation( __textdomain__, fallback=True )
    _=translation.ugettext

    __doc__ = _("[Un]transliteration by GOST 7.79-2000.")
    __usage__ = _("%prog [options] files")
    __ver__ = _("%%prog %s") % __version__

    import optparse
    import os
    import sys
    import traceback

    class UsageError ( Exception ) :
        pass

    class MyOptionParser( optparse.OptionParser ) :
        def error( self, msg ) :
            raise UsageError( msg )

    def files( fnames ) :
        if len(fnames)==0 :
            yield sys.stdin
        else :
            for fn in fnames :
                yield file( fn, "r" )

    def rfile( f, blksize=64*1024 ) :
        r=f.read(blksize)
        while r!="" :
            yield r
            r=f.read(blksize)

    parser = MyOptionParser(
        usage=__usage__,
        version=__ver__,
        prog=os.path.basename( sys.argv[0] ),
        description=__doc__
    )

    # Additional options definition
    parser.add_option( "-t", "--translit", action="store_const", const=encode, dest="func", help=_("Transliterate. (default)"), default=encode )
    parser.add_option( "-u", "--untranslit", action="store_const", const=decode, dest="func", help=_("Untransliterate") )
    parser.add_option( "-o", "--output", dest="out", default=None, help=_("Output file name. stdout will be used if unspecified.") )

    # Processing options and command line parameters.
    try :
        opts, args = parser.parse_args()
        if opts.out==None :
            out = sys.stdout
        else :
            out = file( opts.out, "w+" )
        for f in files( args ) :
            for b in rfile(f) :
                out.write( opts.func( b.decode(enc) ).encode(enc) )
    except UsageError, e:
        parser.print_help( sys.stderr )
        sys.stderr.write( _("\n%(prog)s: error: %(error)s\n") % { "prog":parser.prog, "error":str(e) } )
        sys.exit( 1 )
    except SystemExit :
        raise
    except :
        traceback.print_exc()
        sys.exit( 2 )

