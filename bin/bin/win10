#!/usr/bin/env zsh

zshexit(){
    [[ ${qemu_run_success} == true ]] && finish
}

qemu::msg(){ echo "QEMU :: [$@]"; notify-send "QEMU :: [$@]" }

# -- [qemu ifdown] --
# #!/usr/bin/env dash
# bridge=virtnet0
# brctl delif "$bridge" "$1"
#
# # -- [qemu ifup] --
# setup_nat() {
#     echo 1 > /proc/sys/net/ipv4/ip_forward
#     iptables -t nat -A POSTROUTING -o eno1 -j MASQUERADE
#     iptables -I FORWARD 1 -i tap0 -j ACCEPT
#     iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT
# }

# setup_nat

# bridge=virtnet0
# ip=192.168.100.1
# netmask=255.255.255.0

# # Create the bridge if needed
# br_exsist=$(brctl show | grep -c $bridge)
# if [ "$br_exsist" -eq 0 ]; then
#     brctl addbr "$bridge"
#     brctl setfd "$bridge" 0
#     ifconfig "$bridge" inet "$ip" netmask "$netmask" up
# fi

# ifconfig "$1" "0.0.0.0" promisc up
# brctl addif "$bridge" "$1"

vfio_binder(){
    for dev in "$@"; do
        vendor="$(< /sys/bus/pci/devices/${dev}/vendor)"
        device="$(< /sys/bus/pci/devices/${dev}/device)"
        if [[ -e /sys/bus/pci/devices/"${dev}"/driver ]]; then
            echo "${dev}" > /sys/bus/pci/devices/"${dev}"/driver/unbind
            echo "${dev}" '> /sys/bus/pci/devices/'"${dev}"'/driver/unbind'
        fi
        echo "${vendor}" "${device}" > /sys/bus/pci/drivers/vfio-pci/new_id
    done
}

# Restore settings
finish(){
    killall synergy 2>/dev/null # Kill synergy client
    ps aux | rg 'dtach -c /tmp/qemu.session' | awk '{print $2}' | xargs kill
    while [[ $(xinput | rg 'Razer Razer Huntsman ' | wc -l) == 0 ]]; do
        echo -n '.'
        sleep 1s
    done
    setxkbmap \
        -option keypad:pointerkeys -layout 'us,ru'
        -option 'grp:alt_shift_toggle' -variant altgr-intl \
        -option ctrl:nocaps
    xset m 0 0            # Revert mouse settings
    xset -b r rate 250 50 # Revert keyboard rate
    stig start all > /dev/null 2>&1 # Enable torrents
}

main(){
    qemu_run_success=false
    [[ $(id -u) != "0" ]] && qemu::msg "You should run it from root" && exit 0
    if [[ $(lsmod | rg nvidia) ]]; then
        qemu::msg "You should not use nvidia drivers to run" && exit 0
    fi
    zmodload -aF zsh/system b:zsystem
    lockfile="$(realpath ~neg/tmp/)$(basename $0).lock"
    if [[ -f ${lockfile} ]]; then
        if pgrep qemu 2>/dev/null; then
            qemu::msg "There is lockfile in [${lockfile}]"
            exit 1
        else
            rm -v "${lockfile}"
        fi
    fi

    touch "${lockfile}"
    (
        if zsystem flock -r "${lockfile}"; then
        qemu::msg "Locking to [${lockfile}] qemu_run_success" >&2
        local Home=/home/neg
        local disk_name="w10"
        local win10_iso="${Home}/1st_level/iso/win10.iso"
        local virtio_iso="${Home}/1st_level/iso/virtio-win-0.1.171.iso"
        local qmp_socket_path="${Home}/1st_level/qmp.socket"
        local qmp_sh_script="${Home}/bin/scripts/qmp/qmp-shell"
        local install_iso="${win10_iso}"
        local amount_of_mem_="$(free -m|awk '/Mem/{print $2}')"
        local log_="$(builtin print "l(${amount_of_mem_})/l(2)" | bc -l)"
        local mem_="$(builtin print "(${log_}+0.5)/1" | bc)"
        local vm_memory="$(builtin print "2^${mem_}/2.0" | bc -l | xargs printf "%1.0f")"
        local hugepagesize="$(awk '/Hugepagesize/{print $2}' /proc/meminfo)"
        local hugepages_amount=$(printf '%.0f00\n' "$[${vm_memory}*1024./${hugepagesize}*1.075/100]")
        local lscpu_info=("$(lscpu)")
        local sockets_amount="$(awk -F: '/Socket/{print $2}'     <<< ${lscpu_info[@]} | tr -d '[:space:]')"
        local cores_amount="$(awk -F:   '/per socket/{print $2}' <<< ${lscpu_info[@]} | tr -d '[:space:]')"
        local threads_amount="$(awk -F: '/Thread/{print $2}'     <<< ${lscpu_info[@]} | tr -d '[:space:]')"
        local qemu_bypass_network=false
        local dynamic_usb_bypass=true
        local auto_usb_bypass=false
        local usb_bypass_timeout=40
        local -a qemu_params=(
            -enable-kvm
            -m "${vm_memory}"
            -smp sockets="${sockets_amount}",cores="${cores_amount}",threads="${threads_amount}"
            -cpu host,hv_time,hv_vpindex,hv_reset,hv_runtime,hv_crash,hv_synic,hv_stimer,hv_spinlocks=0x1fff,hv_vendor_id=negus9,kvm=off,l3-cache=on,-hypervisor,migratable=no,+invtsc
            -pidfile /var/run/vm.w10.pid
            -machine q35,accel=kvm,usb=off,vmport=off,dump-guest-core=off,kernel-irqchip=on
            -no-user-config
            -nodefaults
            -rtc base=localtime,driftfix=slew
            -global kvm-pit.lost_tick_policy=discard
            -no-hpet
            -vga none
            -nographic
            -soundhw hda
            -global ICH9-LPC.disable_s3=1
            -global ICH9-LPC.disable_s4=1
            -qmp tcp:localhost:4444,server,nowait
            -drive if=pflash,format=raw,readonly,file=${Home}/bin/qemu/ovmf/ovmf_code_x64.bin
            -drive if=pflash,format=raw,file=${Home}/bin/qemu/ovmf/ovmf_vars_x64.bin
            -device virtio-scsi-pci,id=scsi
            -drive file=/fire/win10.img,format=raw,if=virtio,cache=none
        )
        local -a spice=(
            -spice port=5900,addr=127.0.0.1,disable-ticketing
        )
        local -a looking_glass=(
            -device ivshmem-plain,memdev=ivshmem
            -object memory-backend-file,id=ivshmem,share=on,mem-path=/dev/shm/looking-glass,size=32M
        )
        local -a looking_glass_old=(
            -device ivshmem-doorbell,chardev=ivshmem,vectors=8
            -chardev socket,path=/tmp/ivshmem_socket,id=ivshmem
        )
        local -a qemu_source_params=(
            -drive file="${install_iso},index=0,media=cdrom"
            -drive file="${virtio_iso},index=1,media=cdrom"
            -boot menu=on
        )
        local -a qemu_memory_overcommit=(
            -overcommit mem-lock=on
        )
        local -a qemu_pass_video=(
            -device ioh3420,bus=pcie.0,addr=1c.0,port=1,chassis=1,id=root.1
            -device vfio-pci,host=01:00.0,bus=root.1,addr=00.0
        )
        local -a qemu_pass_network=(
            -net none
            -device vfio-pci,host=07:00.0,bus=root.1
        )
        local -a qemu_pass_input=()
        if [[ ${dynamic_usb_bypass} == true ]]; then
            modprobe ohci-hcd 2> /dev/null
            modprobe ohci-pci 2> /dev/null
            qemu_pass_input=(
                -usb
                -device nec-usb-xhci,id=xhci_defaults0
                -device nec-usb-xhci,id=xhci_defaults1
                -device nec-usb-xhci,id=xhci
                -device ich9-usb-uhci1,id=uhci
                -device usb-ehci,id=ehci
            )
        else
            qemu_pass_input=(
                -usbdevice host:046d:c083 # G403 Prodigy Gaming Mouse
                -usbdevice host:046d:c32b # Logitech G910 [Keyboard]
            )
        fi
        local -a qemu_default_network=(
            -net nic -net tap,ifname=tap0,script=${Home}/bin/qemu-ifup,downscript=${Home}/bin/qemu/qemu-ifdown
        )
        local -a qemu_hugepages_stuff=(
            -mem-prealloc
            -mem-path /dev/hugepages
        )
        "$(dirname $0)/looking-glass-init"
        if [[ ! $(pidof synergyc) && $(hash synergy 2> /dev/null) ]]; then
            sudo -u neg "synergy" 2>&1 > /dev/null &! \
                qemu::msg "Autostart synergy"
        fi
        local -a qemu_network=()
        if [[ ${qemu_bypass_network} == true ]]; then
            vfio_binder "0000:07:00.0"
            for arg in ${qemu_pass_network[@]}; qemu_network+="${arg}"
        else
            for arg in ${qemu_default_network[@]}; qemu_network+="${arg}"
        fi
        if [[ ${dynamic_usb_bypass} == true && ${auto_usb_bypass} == true ]]; then
            {
                qemu::msg "Bypass usb devices automatically, after ${usb_bypass_timeout} seconds"
                sleep ${usb_bypass_timeout}
                "$(dirname $0)/qemu-usb-passthrough" add all || qemu::msg 'Usb bypass failed'
            } &
        fi
        sudo systemctl start sshd
        QEMU_AUDIO_TIMER_PERIOD=150 \
        QEMU_PA_SAMPLES=1024 \
        QEMU_PA_SERVER="[::1]" \
        PULSE_SERVER="[::1]" \
        QEMU_AUDIO_DRV=pa \
        qemu-system-x86_64 "${qemu_params[@]}" \
            "${looking_glass[@]}" \
            "${spice[@]}" \
            "${qemu_pass_video[@]}" \
            "${qemu_pass_input[@]}" -netdev user,id=network0 -device e1000,netdev=network0
        fi

        qemu_run_success=true
        trap finish EXIT TERM KILL
    )
    rm -v "${lockfile}"
    dummy_var=""
    while read dummy_var; do :; done
}

main "$@"
