#!/bin/zsh

body="$3"
urgency="$5"

dunst_pics="$(readlink -f ${HOME}/tmp/dunst-images)"
cover_lock="${dunst_pics}/notify.lock"
image="/tmp/.mpd-notification-artwork.png"
mpd_music_dir="$(awk '/music_directory/{print $2}' ${HOME}/.mpd.conf|tr -d '"'|sed 's:^~:'${HOME}':')"

wf(){
    print "${col1}⟬${end}${bold}$1${end}${col1}⟭${end} "
}

nr(){ print "<span weight='Medium' color='#88aabb'>$1${end}" }

delimiter(){ repeat ${len} print -n "◇" }

get_pid(){
    local mpdsc="$(which mpdscribble) --conf"
    local mpdas="${XDG_CONFIG_HOME}/mpdas"
    pgrep -f "${mpdsc} ${XDG_CONFIG_HOME}/mpdscribble/${1}.conf --no-daemon" || \
    pgrep -f "${mpdas}/${1}.rc"
}

get_lastfm(){
    for pid in neg hextrick; do
        if [[ ! -z $(get_pid "${pid}") ]]; then
            printf "%s\n" "$(wf "L")$(nr $(sed 's:^.:\U&:g' <<< ${pid}) last.fm)"
            break
        fi
    done
}

highlight(){
    print "<span weight='Medium' color='$(xrq color$1)'>"
}

notify(){
    local col1=$(highlight 4)

    local end="</span>"
    local bold="<span weight='bold' color='#88aabb'>"
    local -a bodyarr
    while read line; do
        bodyarr+="${line}"
    done <<< ${body}

    local -a len=()
    for i in {1..6}; len+=${#bodyarr[$i]};
    len=($(printf "%s\n" "${len[@]}"|sort -nr))

    local max_len=35
    len=$[${(@)len[1]}]
    [[ ${len} > ${max_len} ]] && len=${max_len}

    local -a fancy_table=('⚌' '♫' '⟫' '|')

    for i in {1..$#fancy_table}; do
        if [[ ! -z "${bodyarr[i]}" ]]; then
            bodyarr[i]=$(wf ${fancy_table[i]})"$(nr ${bodyarr[i]})\n"
        else
            bodyarr[i]="\n"
        fi
    done

    local current_file="$(mpc -f '%file%'|head -1)"
    local current_dirname="${mpd_music_dir}/$(dirname "${current_file}")"
    local sox_metadata="$(sox --i "${mpd_music_dir}/${current_file}" 2> /dev/null)"
    local audio_quality="$(awk -F '\\s*:\\s*' \
        'BEGIN {} /^Channels/{ch=$2} \
        /^Sample Encoding/{se=$2} \
        /^Bit Rate/{br=$2} \
        /^Sample Rate/{sr=$2/1000} \
        /^Precision/{pr=$2} \
    END { \
    if (se ~ /FLAC/) printf "FLAC·"; \
    if (se ~ /MPEG/) printf "mpeg·"; \
    if (se ~ /Direct Stream Digital/) printf "dsd·"; \
        print br"·"sr"K/"pr"·"ch}' <<< ${sox_metadata})"

    local year="$(awk -F '=' '/^YEAR/{print $2}' <<< ${sox_metadata})"
    local label="$(awk -F '=' '/^LABEL/{print $2}' <<< ${sox_metadata})"

    [[ ${audio_quality// } != "·K/·" ]] && \
        bodyarr[5]=$(wf '❯')"$(nr ${audio_quality})\n" || \
        bodyarr[5]="\n"

    [[ ! -z "${label// }" ]] && \
        bodyarr[6]=$(wf '©')"$(nr ${label})\n" || \
        bodyarr[6]="\n"

    [[ ! -z "${year// }" ]] && \
        bodyarr[7]=$(wf 'Y')"$(nr ${year})\n" || \
        bodyarr[7]="\n"

    local output
    for i in ${bodyarr[@]};
        [[ ${i} != "\n" ]] && output="${output}${i}"

    output="${output}$(get_lastfm)\n$(delimiter)"
    summary="$(delimiter)"
    dunstify -p -a "mpd_notification" -h "string:fgcolor:#17272D" \
        -u "${urgency}" \
        -i "${image}" "${summary}" "${output}" > /tmp/notify_id
    sed '1d' <<< $(echo -n "${body}") > "${cover_lock}"
}

cmp_img(){
    ${HOME}/bin/scripts/compare_images.py "${1}" "${2}"
}

show_notify(){
    if [[ ! -f "${cover_lock}" ]]; then
        notify
    elif [[ -s "${cover_lock}" ]]; then
        if [[ "$(< "${cover_lock}")" !=  "$(sed '1d' <<< $(echo -n "${body}"))" ]]; then
            notify
        fi
    fi
    cp "${image}" "${prev}"
}

zshexit(){
    (
        hashsum1=$(xxh32sum "${image}"|cut -d ' ' -f1)
        sleep 2s
        hashsum2=$(xxh32sum "${image}"|cut -d ' ' -f1)
        [[ ${hashsum1} = ${hashsum2} ]] && rm -f ${image}
    ) &
}

main(){
    dunstify -C "$(< /tmp/notify_id)"
    [[ ! -d "${dunst_pics}" ]] && mkdir -p "${dunst_pics}"
    prev="${dunst_pics}/prev.png"

    find "${dunst_pics}" -name prev.png -not -newermt '-900 seconds' -delete
    if [[ -f ${image} ]]; then
        [[ ! -d "${dunst_pics}" ]] && mkdir -p "${dunst_pics}"

        # send notification with compatible image
        if [[ ! -f "${prev}" ]]; then
            show_notify
        else
            local dunst_picslist=$(setopt nullglob dotglob; print "${dunst_pics}"/*)
            if [[ $(cmp_img "${image}" "${prev}") == "False" ]] \
                && (( ${#dunst_picslist[@]} > 1 )); then
                show_notify
            fi
        fi
    fi
}

main "$@"
