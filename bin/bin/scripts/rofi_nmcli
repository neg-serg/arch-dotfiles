#!/usr/bin/python3
""" NetworkManager command line rofi script.
To add new connections or enable/disable networking requires policykit
permissions setup per:
https://wiki.archlinux.org/index.php/NetworkManager#Set_up_PolicyKit_permissions
OR running the script as root
"""

import itertools
import locale
import os
import sys
import uuid
import subprocess

import gi
gi.require_version('NM', '1.0')
from gi.repository import GLib, NM  # pylint: disable=wrong-import-position

ENV = os.environ.copy()
ENV['LC_ALL'] = 'C'
CLIENT = NM.Client.new(None)
LOOP = GLib.MainLoop()
CONNS = CLIENT.get_connections()

def dmenu_cmd(num_lines, prompt="❯>", active_lines=None):
    args_dict = {}
    dmenu_args = []
    lines = "-i -dmenu -lines"
    num_lines = num_lines or 1
    lines = f"{lines} {num_lines}"
    if active_lines:
        dmenu_args.extend(["-a", ",".join([str(num) for num in active_lines])])
    if prompt == "Passphrase":
        args = [('nf', '#222222'), ('nb', '#222222')]
        args_dict.update(args)
        dmenu_args.extend(["-password"])
    res = ['/usr/bin/rofi', "-p", str(prompt)]
    res.extend(dmenu_args)
    res.extend(['-fn', '"Iosevka Medium 12"'])
    res[1:1] = lines.split()
    res = list(filter(None, res))
    res.extend(sys.argv[1:])

    return res

def choose_adapter(client):
    """ If there is more than one wifi adapter installed,
        ask which one to use
    """
    devices = client.get_devices()
    devices = [i for i in devices if i.get_device_type() == NM.DeviceType.WIFI]
    if not devices:
        return None

    if devices:
        return devices[0]
    device_names = "\n".join([d.get_iface() for d in devices]).encode('UTF-8')
    sel = subprocess.Popen(
        dmenu_cmd(len(devices), "CHOOSE ADAPTER:"),
        stdin=subprocess.PIPE, stdout=subprocess.PIPE,
        env=ENV).communicate(input=device_names)[0].decode('UTF-8')
    if not sel.strip():
        sys.exit()
    devices = [i for i in devices if i.get_iface() == sel.strip()]
    assert len(devices) == 1
    return devices[0]

def is_modemmanager_installed():
    """ Check if ModemManager is installed """
    devnull = open(os.devnull)
    try:
        subprocess.Popen(
            ["ModemManager"], stdout=devnull, stderr=devnull
        ).communicate()
    except OSError:
        return False
    return True

def create_other_actions(client):
    """ Return list of other actions that can be taken """
    networking_enabled = client.networking_get_enabled()
    networking_action = "Disable" if networking_enabled else "Enable"
    wifi_enabled = client.wireless_get_enabled()
    wifi_action = "Disable" if wifi_enabled else "Enable"
    actions = [Action(f"{wifi_action} Wifi", toggle_wifi, not wifi_enabled),
               Action(f"{networking_action} Networking",
                      toggle_networking, not networking_enabled),
               Action("Launch Connection Manager", launch_connection_editor),
               Action("Delete a Connection", delete_connection)]
    if wifi_enabled:
        actions.append(Action("Rescan Wifi Networks", rescan_wifi))
    return actions

def rescan_wifi():
    """ Rescan Wifi Access Points """
    for dev in CLIENT.get_devices():
        if gi.repository.NM.DeviceWifi == type(dev):
            try:
                dev.request_scan()
            except gi.repository.GLib.Error as err:
                if not err.code == 6:
                    raise err

def ssid_to_utf8(nm_ap):
    """ Convert binary ssid to utf-8 """
    ssid = nm_ap.get_ssid()
    if not ssid:
        return ""
    ret = NM.utils_ssid_to_utf8(ssid.get_data())
    return ret

def ap_security(nm_ap):
    """ Parse the security flags to return a string with 'WPA2', etc. """
    flags = nm_ap.get_flags()
    wpa_flags = nm_ap.get_wpa_flags()
    rsn_flags = nm_ap.get_rsn_flags()
    sec_str = ""
    if ((flags & getattr(NM, '80211ApFlags').PRIVACY) and
            (wpa_flags == 0) and (rsn_flags == 0)):
        sec_str += " WEP"
    if wpa_flags != 0:
        sec_str += " WPA1"
    if rsn_flags != 0:
        sec_str += " WPA2"
    if ((wpa_flags & getattr(NM, '80211ApSecurityFlags').KEY_MGMT_802_1X) or
            (rsn_flags & getattr(NM, '80211ApSecurityFlags').KEY_MGMT_802_1X)):
        sec_str += " 802.1X"

    # If there is no security use "--"
    if sec_str == "":
        sec_str = "--"
    return sec_str.lstrip()

class Action():  # pylint: disable=too-few-public-methods
    """ Helper class to execute functions from a string variable """
    def __init__(self, name, func, args=None, active=False,):
        self.name = name
        self.func = func
        self.is_active = active
        if args is None:
            self.args = None
        elif isinstance(args, list):
            self.args = args
        else:
            self.args = [args]

    def __str__(self):
        return self.name

    def __call__(self):
        if self.args is None:
            self.func()
        else:
            self.func(*self.args)

def process_ap(nm_ap, is_active, adapter):
    """ Activate/Deactivate a connection and get password if required """
    if is_active:
        CLIENT.deactivate_connection_async(nm_ap)
    else:
        conns_cur = [
            i for i in CONNS if
            i.get_setting_wireless() is not None and
            i.get_setting_wireless().get_mac_address() ==
            adapter.get_permanent_hw_address()
        ]
        con = nm_ap.filter_connections(conns_cur)
        if len(con) > 1:
            raise ValueError("There are multiple connections possible")

        if len(con) == 1:
            CLIENT.activate_connection_async(con[0])
        else:
            if ap_security(nm_ap) != "--":
                password = get_passphrase()
            else:
                password = ""
            set_new_connection(nm_ap, password, adapter)

def process_vpngsm(con, activate):
    """ Activate/deactive VPN or GSM connections """
    if activate:
        CLIENT.activate_connection_async(con)
    else:
        CLIENT.deactivate_connection_async(con)

def create_ap_actions(aps, active_ap, active_connection, adapter):  # pylint: disable=too-many-locals
    """ For each AP in a list, create the string and its attached function
    (activate/deactivate)
    """
    active_ap_bssid = active_ap.get_bssid() if active_ap is not None else ""

    names = [ssid_to_utf8(ap) for ap in aps]
    secs = [ap_security(ap) for ap in aps]

    ap_actions = []
    for nm_ap, name, sec in zip(aps, names, secs):
        bars = NM.utils_wifi_strength_bars(nm_ap.get_strength())
        is_active = nm_ap.get_bssid() == active_ap_bssid
        action_name = f"{name}  {sec}  {bars}"
        if is_active:
            ap_actions.append(
                Action(action_name, process_ap,
                [active_connection, True, adapter],
                active=True)
            )
        else:
            ap_actions.append(
                Action(action_name, process_ap,
                [nm_ap, False, adapter])
            )
    return ap_actions

def create_vpn_actions(vpns, active):
    """
    Create the list of strings to display with associated function
    (activate/deactivate) for VPN connections.
    """
    active_vpns = [i for i in active if i.get_vpn()]
    return _create_vpngsm_actions(vpns, active_vpns, "VPN")

def create_wireguard_actions(wgs, active):
    """
    Create the list of strings to display with associated function
    (activate/deactivate) for Wireguard connections.
    """
    active_wgs = [i for i in active if i.get_connection_type() == "wireguard"]
    return _create_vpngsm_actions(wgs, active_wgs, "Wireguard")

def create_eth_actions(eths, active):
    """
    Create the list of strings to display with associated function
    (activate/deactivate) for Ethernet connections.
    """
    active_eths = [i for i in active if 'ethernet' in i.get_connection_type()]
    return _create_vpngsm_actions(eths, active_eths, "Eth")

def create_gsm_actions(gsms, active):
    """
    Create the list of strings to display with associated function
    (activate/deactivate) GSM connections.
    """
    active_gsms = [
        i for i in active if
        i.get_connection() is not None and
        i.get_connection().is_type(NM.SETTING_GSM_SETTING_NAME)
    ]
    return _create_vpngsm_actions(gsms, active_gsms, "GSM")

def create_blue_actions(blues, active):
    """
    Create the list of strings to display with associated function
    (activate/deactivate) Bluetooth connections.
    """
    active_blues = [
        i for i in active if
        i.get_connection() is not None and
        i.get_connection().is_type(NM.SETTING_BLUETOOTH_SETTING_NAME)]
    return _create_vpngsm_actions(blues, active_blues, "Bluetooth")

def _create_vpngsm_actions(cons, active_cons, label):
    active_con_ids = [a.get_id() for a in active_cons]
    actions = []
    for con in cons:
        is_active = con.get_id() in active_con_ids
        action_name = f"{con.get_id()}:{label}"
        if is_active:
            active_connection = [
                a for a in active_cons
                if a.get_id() == con.get_id()
            ]
            if len(active_connection) != 1:
                raise ValueError(u"Multiple active connections match"
                                 " the connection: {}".format(con.get_id()))
            active_connection = active_connection[0]
            actions.append(
                Action(action_name, process_vpngsm,
                [active_connection, False], active=True))
        else:
            actions.append(Action(action_name, process_vpngsm, [con, True]))
    return actions

def create_wwan_actions(client):
    """ Create WWWAN actions """
    wwan_enabled = client.wwan_get_enabled()
    wwan_action = "Disable" if wwan_enabled else "Enable"
    return [
        Action("{} WWAN".format(wwan_action), toggle_wwan, not wwan_enabled)
    ]

def get_selection(eths, aps, vpns, wgs, gsms, blues, wwan, others):
    """
    Combine the arg lists and send to dmenu for selection.
    Also executes the associated action.

    Args: args - eths: list of Actions
                 aps: list of Actions
                 vpns: list of Actions
                 gsms: list of Actions
                 blues: list of Actions
                 wwan: list of Actions
                 others: list of Actions
    """
    inp = []
    empty_action = []
    all_actions = []
    all_actions += eths + empty_action if eths else []
    all_actions += aps + empty_action if aps else []
    all_actions += vpns + empty_action if vpns else []
    all_actions += wgs + empty_action if wgs else []
    all_actions += gsms + empty_action if (gsms and wwan) else []
    all_actions += blues + empty_action if blues else []
    all_actions += wwan + empty_action if wwan else []
    all_actions += others

    inp = [str(action) for action in all_actions]
    active_lines = [index for index, action in enumerate(all_actions)
                    if action.is_active]

    inp_bytes = "\n".join(inp)
    sel = subprocess.Popen(
        dmenu_cmd(
            len(inp), active_lines=active_lines),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            env=ENV
        ).communicate(input=bytes(inp_bytes, 'UTF-8'))[0].decode('UTF-8')

    if not sel.rstrip():
        sys.exit()

    action = [
        i for i in eths + aps + vpns + wgs +
        gsms + blues + wwan + others
        if str(i).strip() == sel.strip()
    ]
    assert len(action) == 1, \
        f"Selection was ambiguous: '{str(sel.strip())}'"
    return action[0]

def toggle_networking(enable: bool):
    CLIENT.networking_set_enabled(enable)

def toggle_wifi(enable: bool):
    CLIENT.wireless_set_enabled(enable)

def toggle_wwan(enable: bool):
    CLIENT.wwan_set_enabled(enable)

def launch_connection_editor():
    """ Launch nmtui or the gui nm-connection-editor """
    subprocess.Popen(['alacritty', "-e", "nmtui"]).communicate()

def get_passphrase() -> str:
    return subprocess.Popen(dmenu_cmd(0, "Passphrase"),
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE
    ).communicate()[0].decode('UTF-8')

def delete_connection():
    """ Display list of NM connections and delete the selected one """
    conn_acts = [Action(i.get_id(), i.delete) for i in CONNS]
    conn_names = "\n".join([str(i) for i in conn_acts]).encode('UTF-8')
    sel = subprocess.Popen(
        dmenu_cmd(len(conn_acts), "CHOOSE CONNECTION TO DELETE:"),
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        env=ENV).communicate(input=conn_names)[0].decode('UTF-8')
    if not sel.strip():
        sys.exit()
    action = [i for i in conn_acts if str(i) == sel.rstrip("\n")]
    assert len(action) == 1, u"Selection was ambiguous: {}".format(str(sel))
    action[0]()

def set_new_connection(nm_ap, nm_pw, adapter):
    """Setup a new NetworkManager connection

    Args: ap - NM.AccessPoint
          pw - string

    """
    nm_pw = str(nm_pw).strip()
    profile = create_wifi_profile(nm_ap, nm_pw, adapter)
    CLIENT.add_and_activate_connection_async(
        profile, adapter, nm_ap.get_path(),
        None, verify_conn, profile
    )
    LOOP.run()

def create_wifi_profile(nm_ap, password, adapter):
    # pylint: disable=C0301
    # From https://cgit.freedesktop.org/NetworkManager/NetworkManager/tree/examples/python/gi/add_connection.py
    # and https://cgit.freedesktop.org/NetworkManager/NetworkManager/tree/examples/python/dbus/add-wifi-psk-connection.py
    # pylint: enable=C0301
    """Create the NM profile given the AP and passphrase"""
    ap_sec = ap_security(nm_ap)
    profile = NM.SimpleConnection.new()

    s_con = NM.SettingConnection.new()
    s_con.set_property(NM.SETTING_CONNECTION_ID, ssid_to_utf8(nm_ap))
    s_con.set_property(NM.SETTING_CONNECTION_UUID, str(uuid.uuid4()))
    s_con.set_property(NM.SETTING_CONNECTION_TYPE, "802-11-wireless")
    profile.add_setting(s_con)

    s_wifi = NM.SettingWireless.new()
    s_wifi.set_property(NM.SETTING_WIRELESS_SSID, nm_ap.get_ssid())
    s_wifi.set_property(NM.SETTING_WIRELESS_MODE, 'infrastructure')
    s_wifi.set_property(
        NM.SETTING_WIRELESS_MAC_ADDRESS,
        adapter.get_permanent_hw_address()
    )
    profile.add_setting(s_wifi)

    s_ip4 = NM.SettingIP4Config.new()
    s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, "auto")
    profile.add_setting(s_ip4)

    s_ip6 = NM.SettingIP6Config.new()
    s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, "auto")
    profile.add_setting(s_ip6)

    if ap_sec != "--":
        s_wifi_sec = NM.SettingWirelessSecurity.new()
        if "WPA" in ap_sec:
            s_wifi_sec.set_property(
                NM.SETTING_WIRELESS_SECURITY_KEY_MGMT, "wpa-psk"
            )
            s_wifi_sec.set_property(
                NM.SETTING_WIRELESS_SECURITY_AUTH_ALG, "open"
            )
            s_wifi_sec.set_property(NM.SETTING_WIRELESS_SECURITY_PSK, password)
        elif "WEP" in ap_sec:
            s_wifi_sec.set_property(
                NM.SETTING_WIRELESS_SECURITY_KEY_MGMT, "None"
            )
            s_wifi_sec.set_property(
                NM.SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE,
                NM.WepKeyType.PASSPHRASE
            )
            s_wifi_sec.set_wep_key(0, password)
        profile.add_setting(s_wifi_sec)

    return profile

def verify_conn(client, result, data):
    """
    Callback function for add_and_activate_connection_async

    Check if connection completes successfully. Delete the connection if there
    is an error.

    """
    try:
        act_conn = client.add_and_activate_connection_finish(result)
        conn = act_conn.get_connection()
        conn.verify()
        conn.verify_secrets()
        data.verify()
        data.verify_secrets()
    except GLib.Error:  # pylint: disable=catching-non-exception
        try:
            conn.delete()
        except UnboundLocalError:
            pass
    finally:
        LOOP.quit()

def create_ap_list(adapter, active_connections):
    """
    Generate list of access points. Remove duplicate APs , keeping strongest
    ones and the active AP

    Args: adapter
          active_connections - list of all active connections
    Returns: aps - list of access points
             active_ap - active AP
             active_ap_con - active Connection
             adapter

    """
    aps = []
    ap_names = []
    active_ap = adapter.get_active_access_point()
    aps_all = sorted(adapter.get_access_points(),
        key=lambda a: a.get_strength(),
        reverse=True
    )
    conns_cur = [
        i for i in CONNS if
        i.get_setting_wireless() is not None and
        i.get_setting_wireless().get_mac_address() ==
        adapter.get_permanent_hw_address()
    ]
    try:
        ap_conns = active_ap.filter_connections(conns_cur)
        active_ap_name = ssid_to_utf8(active_ap)
        active_ap_con = [
            active_conn for active_conn in active_connections
            if active_conn.get_connection() in ap_conns
        ]
    except AttributeError:
        active_ap_name = None
        active_ap_con = []
    if len(active_ap_con) > 1:
        raise ValueError(
            "Multiple connection profiles match the wireless AP"
        )
    active_ap_con = active_ap_con[0] if active_ap_con else None
    for nm_ap in aps_all:
        ap_name = ssid_to_utf8(nm_ap)
        if nm_ap != active_ap and ap_name == active_ap_name:
            # Skip adding AP if it's not active but same name as active AP
            continue
        if ap_name not in ap_names:
            ap_names.append(ap_name)
            aps.append(nm_ap)
    return aps, active_ap, active_ap_con, adapter

def run():
    """ Main script entrypoint """
    active = CLIENT.get_active_connections()
    adapter = choose_adapter(CLIENT)
    if adapter:
        ap_actions = create_ap_actions(*create_ap_list(adapter, active))
    else:
        ap_actions = []

    vpns = [i for i in CONNS if i.is_type(NM.SETTING_VPN_SETTING_NAME)]
    wgs = [i for i in CONNS if i.is_type(NM.SETTING_WIREGUARD_SETTING_NAME)]
    eths = [i for i in CONNS if i.is_type(NM.SETTING_WIRED_SETTING_NAME)]
    blues = [i for i in CONNS if i.is_type(NM.SETTING_BLUETOOTH_SETTING_NAME)]

    vpn_actions = create_vpn_actions(vpns, active)
    wg_actions = create_wireguard_actions(wgs, active)
    eth_actions = create_eth_actions(eths, active)
    blue_actions = create_blue_actions(blues, active)
    other_actions = create_other_actions(CLIENT)
    wwan_installed = is_modemmanager_installed()
    if wwan_installed:
        gsms = [i for i in CONNS if i.is_type(NM.SETTING_GSM_SETTING_NAME)]
        gsm_actions = create_gsm_actions(gsms, active)
        wwan_actions = create_wwan_actions(CLIENT)
    else:
        gsm_actions = []
        wwan_actions = []

    sel = get_selection(eth_actions, ap_actions, vpn_actions, wg_actions,
                        gsm_actions, blue_actions, wwan_actions, other_actions)
    sel()

if __name__ == '__main__':
    run()
