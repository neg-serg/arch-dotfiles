#!/usr/bin/env bash

# A tool for attaching and detaching devices to virtual machines, written in bash.
# Author: Eden Tyler-Moss https://github.com/ajmar
# License: GNU GPLv3

# Usage function to be called when the program is ran with -h
usage () {
	echo "# Usbswitch" 
	echo -e "# Attach devices to and from a virtual machine\n"
	echo "Usage: usbswitch -adtADT [-lh]" 
	echo "Options:"
	echo "	-l,			List usb devices with their number, id, and name." 
	echo "	-a DEVICE DOMAIN,	Attach the device to the VM." 
	echo "	-d DEVICE DOMAIN,	Detach the device from the VM."
	echo "	-t DEVICE DOMAIN,	Toggle devices attachment to the VM."
	echo "	-A DEVICE DOMAIN,	Add the device to the VM config."
	echo "	-D DEVICE DOMAIN,	Remove the device from the VM config."
	echo "	-T DEVICE DOMAIN,	Toggle the device's presence in the VM config."
	echo -e "	-h,			Display usage information.\n"
	echo -e "Notes:\nDEVICE can be either the number, id, or name of the usb device. Run usbswitch with -l to see these values.\nThe -a -d and -t options cannot be run at the same time, likewise with -A -D and -T.\nThe program will need elevated privlages to run (WIP, may not be handled correctly)."
	echo -e "\nSee https://github.com/ajmar/usbswitch for source & more details."
}

# Create an error function to be called for error message printing, printing in red.
error () {
	local CLR="\e[1;0m"
	local RED="\e[1;31m"
	printf "${RED}[ERROR]${CLR} %s${CLR}\n" "$@" 1>&2
}

# Check if the command has received any arguments, exit if not.
[ "$#" = '0' ] && error "No arguments supplied." 1>&2 && exit 1

# Check whether libvirt and lsusb are installed on the system.
if ! (hash lsusb 2>/dev/null); then
	error "lsusb is not installed." && exit 1
elif ! (hash virsh 2>/dev/null); then
	error "libvirt is not installed." && exit 1
fi

# Establishes a list of usb devices to be used, and removes Linux Foundation usb hubs.
listfull="$(lsusb | cut -d " " -f 6- | sed '/Linux Foundation/d' | sed 's/ /	/' | awk '{print NR-0 "	" $0}')"

# Tests whether there is multiple devices that the user could have meant, exits if so. If not, it creates a xml file for virsh to use, populating it with the usb device ids.
select_device () {
	if (( $(grep -c . <<<"$selectline") > 1 )); then
		error "Device name not precise enough." 1>&2 && exit; fi
	combined_id=$(echo "$selectline" | cut -d "	" -f 2- | cut -d "	" -f -1)
	device_id=$(echo "$combined_id" | cut -d ":" -f 2-)
	vendor_id=$(echo "$combined_id" | cut -d ":" -f -1)
	echo "<hostdev mode='subsystem' type='usb' managed='no'>
	<source>
	<vendor id='0x$vendor_id'/>
	<product id='0x$device_id'/>
	</source>
	</hostdev>" > /tmp/usbswitch.xml
}

# Tests whether the device input matches a usb device name, after testing id and number.
select_name () {
	selectline=$(echo "$listfull" | awk -F"	" '$3 ~ /'$OPTARG'/{print}')
	[[ $selectline ]] && select_device || error "No matching device found." 1>&2 && exit 1
}

# Tests whether the device input matches a usb device id, after testing the number.
select_id () {
	selectline=$(echo "$listfull" | awk -F"	" '$2 ~ /'$OPTARG'/{print}')
	if [[ $selectline ]]; then
		select_device
	else
		select_name
	fi
}

# Tests wether the device input matches a usb number.
select_num () { 
	selectline=$(echo "$listfull" | awk -F"	" '$1 ~ /^'$OPTARG'$/{print}')
	if [[ $selectline ]]; then
		select_device
	else
		select_id
	fi
}

# First tests whether a device & domain has been specified, if the device is not already attached, and if the guest is running. If so, attach the device to the vm using the .xml file.
attach_device () {
	select_num &&
	shift $((OPTIND - 1))
	[ "$#" = 0 ] && error "Not enough arguments supplied." 1>&2 && exit 1
	virsh list --all | grep -E "$1.*running" 1>/dev/null || (error "Is the guest running?"; exit 1)
	virsh attach-device "$1" /tmp/usbswitch.xml 2>&1 | grep -q "is in use by" && error "Is the device already attached?" 1>&2 && exit 1 || echo -e 'Attaching:'"\n""$selectline" && exit
}

# First tests whether a device & domain has been specified, if the device is not already attached, and if the guest is running. If so, detach the device to the vm using the .xml file.
detach_device () {
	select_num &&
	shift $((OPTIND - 1))
	[ "$#" = 0 ] && error "Not enough arguments supplied." 1>&2 && exit 1
	virsh list --all | grep -E "$1.*running" >/dev/null || (error "Is the guest running?"; exit 1)
	virsh detach-device "$1" /tmp/usbswitch.xml 2>&1 | grep -q "error: device not found" && error "Is the device already detached?" 1>&2 && exit 1 || echo -e 'Detaching:'"\n""$selectline" && exit
}

# First tests whether a device & domain has been specified, and if the device is not already in the domain. If so, add the device to the domain config using the .xml file.
attach_device_perm () {
	select_num &&
	shift $((OPTIND - 1))
	[ "$#" = 0 ] && error "Not enough arguments supplied." 1>&2 && exit 1
	virsh attach-device "$1" /tmp/usbswitch.xml --config 2>&1 | grep -q "device is already in the domain" && error "The device is already in the guest configuration." 1>&2 && exit 1 || echo -e 'Adding to config:'"\n""$selectline" && exit
}

# First tests whether a device & domain has been specified, and if the device is in the domain. If so, remove the device from the domain config using the .xml file.
detach_device_perm () {
	select_num &&
	shift $((OPTIND - 1))
	[ "$#" = 0 ] && error "Not enough arguments supplied." 1>&2 && exit 1
	virsh detach-device "$1" /tmp/usbswitch.xml --config 2>&1 | grep -q "device not present in domain" && error "The device is not in the guest configuration." 1>&2 && exit 1 || echo -e 'Removing from config:'"\n""$selectline" && exit
}

# Uses getopts to detect specified options, and executes the relevant functions.
while getopts ":la:d:t:A:D:T:h" opt; do
	case "$opt" in
		l)
			echo "Number	ID	Name"
			echo "$listfull"
			exit
			;;
		a)
			attach_device "${@}"
			;;
		d)
			detach_device "${@}"
			;;
		t)
			select_num
			lsusb -v -d "$vendor_id"':'"$device_id" 2>&1 | grep -q 'get debug descriptor: Resource temporarily unavailable'
			status="$?"
			if [ "$status" = '1' ]
			then
				attach_device "${@}"
			else
				detach_device "${@}"
			fi
			;;
		A)
			attach_device_perm "${@}"
			;;
		D)
			detach_device_perm "${@}"
			;;
		T)
			permtoggle=$(attach_device_perm "${@}" 2>&1)
			echo "$permtoggle" | grep -q "The device is already in the guest configuration." && detach_device_perm "${@}" || echo "$permtoggle"
			;;
		h)
			usage && exit
			;;
		\?)
			error "Invalid option: -$OPTARG" 1>&2
			exit 1
			;;
		:)
			error "-$OPTARG Requires an argument." 1>&2
			exit 1
			;;
	esac
done

