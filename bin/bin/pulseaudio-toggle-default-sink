#!/usr/bin/env bash
#
# Copyright (C) 2020 BarbUk <barbarisme@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

set -o errexit -o pipefail -o nounset

default_sink_name=$(pactl info | sed -En 's/Default Sink: (.*)/\1/p')
availables_sink=$(pactl list short sinks | awk '$3 !~ /^module-echo-cancel.c$/ {print $1,$2}')
action=default
declare -A colors;

colors=(\
    ['bold']=$(tput bold)
    ['underline']=$(tput smul)
    ['reset']=$(tput sgr0)
);

readonly availables_sink default_sink_name

get_sink_inputs() {
  pactl list sink-inputs | awk '/Sink Input #/,/^$/ {
    if (/module-stream-restore.id/) {
      p=1
    }
    if (/^[[:space:]]*application.name/) {
      gsub("\"","",$3); name=$3
    }
    if (/^[[:space:]]*object.id/) {
      gsub("\"","",$3); input = $3
    }
    if (/^[[:space:]]*media.role/) {
      gsub("\"","",$3); role = $3
    }
    if (/^[[:space:]]*Sink:/) {
      sink = $2
    }
  }
  p {
    if (length(role) == 0) {
      role = "no"
    }
    print name, role, sink, input; p=0
  }'
}

text() {
  local text=$1 style=${2:-bold}
  echo -e "${colors[$style]}$text${colors[reset]}"
}

usage() {
    text "Usage:"
    echo -e "\t$0 [OPTION] [ACTION]"
    echo -e "\tToggle your defaut sound output or change your music player from an output to another"
    echo
    text "Options"
    echo -e "\t-h, --help: Show help"
    echo -e "\t-o, --output <output index>: use a specific output"
    echo
    text "Actions"
    echo -e "\t${colors[bold]}default${colors[reset]}: change default output (default action)"
    echo -e "\t${colors[bold]}list${colors[reset]}: list detected inputs and outputs"
    echo -e "\t${colors[bold]}reset${colors[reset]}: reset all active input to the default output"
    echo -e "\t${colors[bold]}media <ROLE>${colors[reset]}: change <ROLE> input to another output"
    # http://0pointer.de/lennart/projects/pulseaudio/doxygen/proplist_8h.html#a06b7c7a5bfc7a20974b7785031169596
    echo
    text "Roles"
    echo -e "\tOne of the strings video, music, game, event, phone, animation, production, a11y, test"
    exit
}

sink_decription() {
  local current_sink=$1
  pamixer --list-sinks | awk -v current_sink="$current_sink" -F'"' '$1 ~ current_sink {print $4}'
}

swap_sink() {
  while read -r index name; do
    if [ "$name" != "$default_sink_name" ] ; then
      pactl set-default-sink "$index"
      notify-send -i multimedia-volume-control "Changed default sink" "Changed output to $(sink_decription "$index")"
    fi
  done <<< "$availables_sink"
}

swap_role_sink() {
  local role_to_change=$1
  while read -r name role sink input; do
        if [ "$role" = "$role_to_change" ] ; then
          while read -r index sink_name; do
            if [ "$index" != "$sink" ] ; then
              pactl move-sink-input "$input" "$index"
              notify-send -i multimedia-volume-control "Swaped $role_to_change input" "Changed $name input to $(sink_decription "$index")"
            fi
          done <<< "$availables_sink"
        fi
    done < <(get_sink_inputs)
}

reset_inputs() {
  local default_sink_index
  default_sink_index=$(awk -v default_sink="$default_sink_name" '$2 ~ default_sink {print $1}' <<< "$availables_sink")

  while read -r name role sink input; do
    if [ "$sink" != "$default_sink_index" ] ; then
      pactl move-sink-input "$input" "$default_sink_index"
      notify-send -i multimedia-volume-control "Input reset" "Changed $name input to $(sink_decription "$default_sink_index")"
    fi
  done < <(get_sink_inputs)
}

parse_options() {
  while (( "$#" )); do
    case "$1" in
      -h|--help|help)
        usage
        ;;
      -o|--output)
        usage
        ;;
      media)
        action=media
        if [[ $# -ne 2 ]]; then
          text "You need to specify a role"
          echo
          usage
        fi
        role=$2
        shift 2
        ;;
      --) # end argument parsing
        shift
        break
        ;;
      *)
        action=$1
        shift
        ;;
    esac
  done
}

list_inputs_outputs() {
  text "Inputs:"
  text "Name\tRole\tOutput\tIndex" "underline"
  tr ' ' '\t' <<< "$(get_sink_inputs)"
  echo
  text "Outputs:"
  text "Index\tName" "underline"
  tr ' ' '\t' <<< "$availables_sink"
  echo
  text "Default output:"
  echo "$default_sink_name"
}

main() {

  parse_options "$@"

  case "$action" in
    media ) swap_role_sink "$role";;
    reset ) reset_inputs;;
    list ) list_inputs_outputs;;
    * ) swap_sink;;
  esac
}

main "$@"
