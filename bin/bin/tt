#!/usr/bin/env zsh

terminal_compat_test(){
    echo "# 24-bit (true-color)"
    # based on: https://gist.github.com/XVilka/8346728
    term_cols="$(tput cols || echo 80)"
    cols=$(echo "2^((l($term_cols)/l(2))-1)" | bc -l 2> /dev/null)
    rows=$(( cols / 2 ))
    awk -v cols="$cols" -v rows="$rows" 'BEGIN{
        s="  ";
        m=cols+rows;
        for (row = 0; row<rows; row++) {
          for (col = 0; col<cols; col++) {
              i = row+col;
              r = 255-(i*255/m);
              g = (i*510/m);
              b = (i*255/m);
              if (g>255) g = 510-g;
              printf "\033[48;2;%d;%d;%dm", r,g,b;
              printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
              printf "%s\033[0m", substr(s,(col+row)%2+1,1);
          }
          printf "\n";
        }
        printf "\n\n";
    }'

    echo "# text decorations"
    printf '\e[1mbold\e[22m\n'
    printf '\e[2mdim\e[22m\n'
    printf '\e[3mitalic\e[23m\n'
    printf '\e[4munderline\e[24m\n'
    printf '\e[4:1mthis is also underline\e[24m\n'
    printf '\e[21mdouble underline\e[24m\n'
    printf '\e[4:2mthis is also double underline\e[24m\n'
    printf '\e[4:3mcurly underline\e[24m\n'
    printf '\e[58;5;10;4mcolored underline\e[59;24m\n'
    printf '\e[5mblink\e[25m\n'
    printf '\e[7mreverse\e[27m\n'
    printf '\e[8minvisible\e[28m <- invisible (but copy-pasteable)\n'
    printf '\e[9mstrikethrough\e[29m\n'
    printf '\e[53moverline\e[55m\n'
    echo

    echo "# magic string (see https://en.wikipedia.org/wiki/Unicode#Web)"
    echo "é Δ Й ק م ๗ あ 叶 葉 말"
    echo

    echo "# emojis"
    echo "😃😱😵"
    echo

    echo "# right-to-left ('w' symbol should be at right side)"
    echo "שרה"
    echo

    echo "# sixel graphics"
    printf '\eP0;0;0q"1;1;64;64#0;2;0;0;0#1;2;100;100;100#1~{wo_!11?@FN^!34~^NB
    @?_ow{~$#0?BFN^!11~}wo_!34?_o{}~^NFB-#1!5~}{o_!12?BF^!25~^NB@??ow{!6~$#0!5?
    @BN^!12~{w_!25?_o{}~~NFB-#1!10~}w_!12?@BN^!15~^NFB@?_w{}!10~$#0!10?@F^!12~}
    {o_!15?_ow{}~^FB@-#1!14~}{o_!11?@BF^!7~^FB??_ow}!15~$#0!14?@BN^!11~}{w_!7?_
    w{~~^NF@-#1!18~}{wo!11?_r^FB@??ow}!20~$#0!18?@BFN!11~^K_w{}~~NF@-#1!23~M!4?
    _oWMF@!6?BN^!21~$#0!23?p!4~^Nfpw}!6~{o_-#1!18~^NB@?_ow{}~wo!12?@BFN!17~$#0!
    18?_o{}~^NFB@?FN!12~}{wo-#1!13~^NB@??_w{}!9~}{w_!12?BFN^!12~$#0!13?_o{}~~^F
    B@!9?@BF^!12~{wo_-#1!8~^NFB@?_w{}!19~{wo_!11?@BN^!8~$#0!8?_ow{}~^FB@!19?BFN
    ^!11~}{o_-#1!4~^NB@?_ow{!28~}{o_!12?BF^!4~$#0!4?_o{}~^NFB!28?@BN^!12~{w_-#1
    NB@???GM!38NMG!13?@BN$#0?KMNNNF@!38?@F!13NMK-\e\'
}

perf_test(){
    MAX_RETRIES=100000
    START=$(date +%s.%N)
    # 7*42 + 48
    for _ in {1..100000}; do
        echo -e '\r';
        echo -e '\033[0K\033[1mBold\033[0m \033[7mInvert\033[0m \033[4mUnderline\033[0m';
        echo -e '\033[0K\033[1m\033[7m\033[4mBold & Invert & Underline\033[0m';
        echo;
        echo -e '\033[0K\033[31m Red \033[32m Green \033[33m Yellow \033[34m Blue \033[35m Magenta \033[36m Cyan \033[0m';
        echo -e '\033[0K\033[1m\033[4m\033[31m Red \033[32m Green \033[33m Yellow \033[34m Blue \033[35m Magenta \033[36m Cyan \033[0m';
        echo;
        echo -e '\033[0K\033[41m Red \033[42m Green \033[43m Yellow \033[44m Blue \033[45m Magenta \033[46m Cyan \033[0m';
        echo -e '\033[0K\033[1m\033[4m\033[41m Red \033[42m Green \033[43m Yellow \033[44m Blue \033[45m Magenta \033[46m Cyan \033[0m';
        echo;
        echo -e '\033[0K\033[30m\033[41m Red \033[42m Green \033[43m Yellow \033[44m Blue \033[45m Magenta \033[46m Cyan \033[0m';
        echo -e '\033[0K\033[30m\033[1m\033[4m\033[41m Red \033[42m Green \033[43m Yellow \033[44m Blue \033[45m Magenta \033[46m Cyan \033[0m';
    done
    END=$(date +%s.%N)
    echo "Coloured output test takes: " + "$(echo "($END - $START)" | bc)" + " seconds"
    COLOURED_OUPUT=$(echo "(300 * $MAX_RETRIES) / ($END - $START)" | bc)

    START=$(date +%s.%N)
    for _ in {1..100000}; do
        echo -e '\r';
        echo -e '🎫💋📂💣💒💁💀💳📄📕📦📷🔈🔙🔪🔻🔻🕊🕊🕛🕬🕽🖎🖎🖎🖍🖞🗀🗑🗢🗳🗡🗤🗣🗺🗻🗼🗽🗾🗿🗮🗝🗌🖻🖪🖙🖈🕷🕦🕕🔳🔢🔑🔀📯📞📍💼💫💚💉👸👧👖🐴🐣🐒🐁🏰🏟🏎🎽🎬🎛🎊🍹🍨🍗';
    done
    END=$(date +%s.%N)
    echo "Unicode output test takes: " "$(echo "($END - $START)" | bc)" " seconds"
    UNICODE_OUPUT=$(echo "(139 * $MAX_RETRIES) / ($END - $START)" | bc)

    START=$(date +%s.%N)
    for _ in {1..100000}; do
        echo -e '\r';
        echo -e 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
    done
    END=$(date +%s.%N)
    echo "Non-unicode output test takes: " "$(echo "($END - $START)" | bc)" " seconds"
    NONE_UNICODE_OUPUT=$(echo "(118 * $MAX_RETRIES) / ($END - $START)" | bc)

    test_output='';
    START=$(date +%s.%N)
    for _ in {1..10}; do
        test_output="${test_output} a🎫"
        for __ in {1..100000}; do
            echo -e '\r';
            echo -e "$test_output";
        done
    done
    END=$(date +%s.%N)
    echo "Mixed output test takes: " "$(echo "($END - $START)" | bc)" " seconds"
    MIXED_OUPUT=$(echo "(165 * $MAX_RETRIES) / ($END - $START)" | bc)

    echo "${COLOURED_OUPUT} coloured characters per second"
    echo "${UNICODE_OUPUT} unicode characters per second"
    echo "${NONE_UNICODE_OUPUT} none-unicode characters per second"
    echo "${MIXED_OUPUT} Mixed characters per second"
}


fps(){
    # Copyright (c) 2010, 2013 Yu-Jie Lin
    #
    # Permission is hereby granted, free of charge, to any person obtaining a copy of
    # this software and associated documentation files (the "Software"), to deal in
    # the Software without restriction, including without limitation the rights to
    # use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    # of the Software, and to permit persons to whom the Software is furnished to do
    # so, subject to the following conditions:
    #
    # The above copyright notice and this permission notice shall be included in all
    # copies or substantial portions of the Software.
    #
    # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    # SOFTWARE.
    #
    # Usage: termfps.sh [FRAMES] [COLUMNS] [LINES]

    FRAMES=${1:-100}
    COLUMNS=${2:-$(tput cols)}
    LINES=${3:-$(tput lines)}
    CHARS=$((COLUMNS * LINES * FRAMES))

    printf -v dummy_line   "%${COLUMNS}s"     ''
    printf -v dummy_line_n "%${COLUMNS}s\n"   ''
    printf -v dummy_frame  "%$((LINES - 1))s" ''

    for ((ch = 0; ch < 10; ch++)); do
        line_str=${dummy_line// /$ch}
        line_n_str=${dummy_line_n// /$ch}
        frame_str="${dummy_frame// /$line_n_str}$line_str"
        frame_str_r="frame_str$ch"

        eval "$frame_str_r=\"$frame_str\""
    done

    t_start=$(date +%s.%N)
    for ((i = 0; i < FRAMES; i++)); do
        for ((ch = 0; ch < 10; ch++)); do
            frame_str="frame_str$ch"
            eval echo -ne "\033[H\$$frame_str"
        done
    done
    t_end=$(date +%s.%N)

    echo
    echo "For ${COLUMNS}x${LINES} $FRAMES frames."
    printf "Elapsed time : %'9.3f\n" "$(bc <<< "scale=3;           ($t_end - $t_start) / 1")"
    printf "Frames/second: %'9.3f\n" "$(bc <<< "scale=3; $FRAMES / ($t_end - $t_start)")"
    printf "Chars /second: %'9d\n" "$(bc <<< "scale=0; $CHARS  / ($t_end - $t_start)")"
}

case "$1" in
    "compat") terminal_compat_test ;;
    "fps") fps ;;
    "perf") perf_test ;;
esac
