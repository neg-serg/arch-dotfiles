#!/usr/bin/env python3
""" Print network interface download / upload rate """

import threading
import time
from collections import deque
import psutil


def calc_ul_dl(rate, delta=1, interface="net1"):
    """ Calculate upload/download rate """
    time0 = time.time()
    while interface not in psutil.net_io_counters(pernic=True):
        time.sleep(delta)
    if interface in psutil.net_io_counters(pernic=True):
        counter = psutil.net_io_counters(pernic=True)[interface]
        tot = (counter.bytes_sent, counter.bytes_recv)

        while True:
            last_tot = tot
            time.sleep(delta)
            counter = psutil.net_io_counters(pernic=True)[interface]
            time1 = time.time()
            tot = (counter.bytes_sent, counter.bytes_recv)
            upload_rate, download_rate = [
                (now - last) / (time1 - time0) / 1024.0
                for now, last in zip(tot, last_tot)
            ]
            rate.append((upload_rate, download_rate))
            time0 = time.time()


def print_rate(rate):
    """ Print network rate """
    if len(list(rate)) > 0:
        ul_dl_rate = list(rate[0])
        print("%{T4 F#8BAAC7}%{T- F-} " + format(ul_dl_rate[1], '.1f') \
                + "%{F#395573}/%{F-}" + format(ul_dl_rate[0], '.1f'), flush=True)


# Create the ul/dl thread and a deque of length 1 to hold the ul/dl- values
transfer_rate = deque(maxlen=1)
t = threading.Thread(target=calc_ul_dl, args=(transfer_rate,))

# The program will exit if there are only daemonic threads left.
t.daemon = True
t.start()

# The rest of your program, emulated by me using a while True loop
while True:
    print_rate(transfer_rate)
    time.sleep(1)
