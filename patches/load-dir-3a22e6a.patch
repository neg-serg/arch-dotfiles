From 9e2db06e17fb8714df678c7bec3a2f07eeeaf7b6 Mon Sep 17 00:00:00 2001
From: NRK <nrk@disroot.org>
Date: Mon, 14 Mar 2022 15:49:49 +0600
Subject: [PATCH] patch: load_dir

this isn't any faster than the (n)sxiv-rifle script run through dash i
see only a 0.001 difference loading a dir with 371 pics on an ssd.

there's a couple hacky things going on in this patch, but it's probably
the fastest way to do things without introducing a hashtable.
---
 main.c | 28 ++++++++++++++++++++++------
 1 file changed, 22 insertions(+), 6 deletions(-)

diff --git a/main.c b/main.c
index 976bd5f..2fba6b3 100644
--- a/main.c
+++ b/main.c
@@ -113,7 +113,7 @@ static bool xgetline(char **lineptr, size_t *n)
 	return len > 0;
 }
 
-static void check_add_file(char *filename, bool given)
+static void check_add_file(const char *filename, bool given, const char *match)
 {
 	char *path;
 
@@ -135,7 +135,7 @@ static void check_add_file(char *filename, bool given)
 	}
 
 	files[fileidx].name = estrdup(filename);
-	files[fileidx].path = path;
+	files[fileidx].path = match != NULL && STREQ(path, match) ? (free(path), match) : path;
 	if (given)
 		files[fileidx].flags |= FF_WARN;
 	fileidx++;
@@ -837,7 +837,7 @@ int main(int argc, char *argv[])
 {
 	int i, start;
 	size_t n;
-	char *filename;
+	char *filename, *savedname = NULL;
 	const char *homedir, *dsuffix = "";
 	struct stat fstats;
 	r_dir_t dir;
@@ -872,10 +872,18 @@ int main(int argc, char *argv[])
 		n = 0;
 		filename = NULL;
 		while (xgetline(&filename, &n))
-			check_add_file(filename, true);
+			check_add_file(filename, true, NULL);
 		free(filename);
 	}
 
+	if (options->filecnt == 1 && options->filenames[0] != NULL &&
+	    stat(options->filenames[0], &fstats) == 0 && !S_ISDIR(fstats.st_mode))
+	{
+		char *tmp;
+		if ((savedname = realpath(options->filenames[0], NULL)) == NULL)
+			error(EXIT_FAILURE, errno, "Failed to get path");
+		options->filenames[0] = ((*strrchr((tmp = estrdup(savedname)), '/')) = '\0', tmp); /* don't ask why... */
+	}
 	for (i = 0; i < options->filecnt; i++) {
 		filename = options->filenames[i];
 
@@ -884,7 +892,7 @@ int main(int argc, char *argv[])
 			continue;
 		}
 		if (!S_ISDIR(fstats.st_mode)) {
-			check_add_file(filename, true);
+			check_add_file(filename, true, savedname);
 		} else {
 			if (r_opendir(&dir, filename, options->recursive) < 0) {
 				error(0, errno, "%s", filename);
@@ -892,7 +900,7 @@ int main(int argc, char *argv[])
 			}
 			start = fileidx;
 			while ((filename = r_readdir(&dir, true)) != NULL) {
-				check_add_file(filename, false);
+				check_add_file(filename, false, savedname);
 				free((void*) filename);
 			}
 			r_closedir(&dir);
@@ -906,6 +914,14 @@ int main(int argc, char *argv[])
 
 	filecnt = fileidx;
 	fileidx = options->startnum < filecnt ? options->startnum : 0;
+	for (i = 0; savedname != NULL && i < filecnt; ++i) {
+		if (files[i].path == savedname) { /* poor man's hash; compare ptrs instead of string */
+			fileidx = i;
+			savedname = NULL;
+			break;
+		}
+	}
+	free(savedname);
 
 	win_init(&win);
 	img_init(&img, &win);
-- 
2.35.1

