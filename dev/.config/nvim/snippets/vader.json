{
  "giv": {
    "prefix": "giv",
    "description": "given block",
    "body": [
      "Given ${1:{filetype\\}} ${2:($3)}:",
      "\t$4"
    ]
  },
  "do": {
    "prefix": "do",
    "description": "do block",
    "body": [
      "Do ${1:($2)}:",
      "\t$3"
    ]
  },
  "exe": {
    "prefix": "exe",
    "description": "execute block",
    "body": [
      "Execute ${1:[ruby/python/perl/lua]} ${2:($3)}:",
      "\t$4"
    ]
  },
  "then": {
    "prefix": "then",
    "description": "then block",
    "body": [
      "Then ${1:($2)}:",
      "\t$3"
    ]
  },
  "exp": {
    "prefix": "exp",
    "description": "expect block",
    "body": [
      "Expect ${1:{filetype\\}} ${2:($3)}:",
      "\t$4"
    ]
  },
  "bef": {
    "prefix": "bef",
    "description": "before block",
    "body": [
      "Before ${1:($2)}:",
      "\t$3"
    ]
  },
  "aft": {
    "prefix": "aft",
    "description": "after block",
    "body": [
      "After ${1:($2)}:",
      "\t$3"
    ]
  },
  "inc": {
    "prefix": "inc",
    "description": "include macro",
    "body": "Include: $1.vader"
  },
  "as": {
    "prefix": "as",
    "description": "assert",
    "body": "Assert ${1:{bool\\}}${2:, ${3:{message\\}}}"
  },
  "ase": {
    "prefix": "ase",
    "description": "assertEqual",
    "body": "AssertEqual ${1:{expected\\}}, ${2:{got\\}}${3:, ${4:{message\\}}}"
  },
  "asne": {
    "prefix": "asne",
    "description": "assertNotEqual",
    "body": "AssertNotEqual ${1:{expected\\}}, ${2:{got\\}}${3:, ${4:{message\\}}}"
  },
  "ast": {
    "prefix": "ast",
    "description": "assertThrows",
    "body": "AssertThrows $1"
  },
  "log": {
    "prefix": "log",
    "description": "log",
    "body": "Log $1"
  },
  "save": {
    "prefix": "save",
    "description": "save",
    "body": "Save $1${2:, $3}"
  },
  "rest": {
    "prefix": "rest",
    "description": "restore",
    "body": "Restore ${1:$2${3:, $4}}"
  },
  "syna": {
    "prefix": "syna",
    "description": "syntaxAt function",
    "body": "SyntaxAt($1)"
  },
  "synac": {
    "prefix": "synac",
    "description": "syntaxAt function with col argument",
    "body": "SyntaxAt(${1:{col\\}})"
  },
  "synalc": {
    "prefix": "synalc",
    "description": "syntaxAt function with line and col argument",
    "body": "SyntaxAt(${1:{lnum\\}}, ${2:{col\\}})"
  },
  "syno": {
    "prefix": "syno",
    "description": "syntaxOf function",
    "body": "SyntaxOf(${1:{pattern\\}}${2:, ${3:{nth\\}}})"
  }
}
