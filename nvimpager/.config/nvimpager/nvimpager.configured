#!/bin/bash

# Copyright (c) 2017 Lucas Hoffmann
# Licenced under a BSD-2-clause licence.  See the LICENSE file.

name=nvimpager
version=0.3-13-gca711f1
mode=auto
rc=${XDG_CONFIG_HOME:-~/.config}/nvimpager/init.vim

usage () {
  echo "Usage: ${0##*/} [-cp] [--] [nvim options and files]"
  echo "       ${0##*/} -h"
  echo "       ${0##*/} -v"
}
description () {
  local shortrc
  # Display the path of $HOME as a literal "~".
  shortrc=${rc/${HOME//\//\\/}/\~}
  cat <<-EOF

	$name provides a simple pager based on neovim.
	Options:
	  -h		this help
	  -v		version output
	  -a		enforce auto mode (default)
	  -c		enforce cat mode
	  -p		enforce pager mode
	  -u FILE	use "FILE" as init file (default: $shortrc)

	All further arguments are passed to neovim.  But one has to add "--"
	if the first argument is an option in order to stop this script from
	interpeting it.

	If "-" or no files are given stdin is read.

	In auto mode the cumulative length of all file arguments is smaller
	than the terminal size, cat mode is used, otherwise pager mode is
	used.  If any none file argument (neovim option) is given pager mode
	is implied.

	If the init file does not exist it is silently replaced with "NORC" to
	prevent nvim from loading the users init.vim.
	EOF
}

while getopts achpu:v flag; do
  case $flag in
    a) mode=auto;;
    c) mode=cat;;
    h) usage; description; exit;;
    p) mode=pager;;
    u) rc=$OPTARG;;
    v) echo "$name $version"; exit;;
    *) usage >&2; exit 2;;
  esac
done
shift $((OPTIND - 1))

# If we are not on a tty just "be" cat.
if [[ ! -t 1 && "$mode" = auto ]]; then
  exec cat "$@"
fi

RUNTIME='/usr/local/share/nvimpager/runtime'
export RUNTIME

if [[ ! -r "$rc" ]]; then
  rc=NORC
fi

# Collect all file arguments until the first non file into $files.  If one non
# file is found pager mode is enforced.
files=()
while [[ $# -gt 0 ]]; do
  if [[ -f "$1" ]]; then
    files+=("$1")
    shift
  else
    if [[ "$mode" = auto ]]; then
      mode=pager
    fi
    break
  fi
done

# Either if stdin is not a tty or if we are not in pager mode but did not get
# any file arguments, read stdin into a temp file.
if [[ ( "$mode" != pager && ${#files[@]} -eq 0 ) || ! -t 0 ]]; then
  files=("$(mktemp)")
  trap 'rm -f "${files[0]}"' HUP INT QUIT TERM ABRT PIPE ALRM EXIT
  cat > "${files[0]}"
fi

default_args=(
  -R
  -u "$rc"
  --cmd 'set rtp^=$RUNTIME'
  --cmd 'call pager#start()'
)
# Switch to pager mode if all files combined are shorter than the terminal
# height.
if [[ "$mode" = cat || \
      "$mode" = auto && "$(cat "${files[@]}" | wc -l)" -le "$(tput lines)" ]]
then
  default_args+=(--headless -c 'call pager#prepare_cat()')
else
  default_args+=(-c 'call pager#prepare_pager()')
fi
nvim "${default_args[@]}" "${files[@]}" "$@"
